# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.i_import_information import IImportInformation
from openapi_client.models.i_purchase_order_line_by_filter import IPurchaseOrderLineByFilter
from openapi_client.models.i_vendor_party import IVendorParty
from openapi_client.models.modules_purchase_order_status import ModulesPurchaseOrderStatus
from openapi_client.models.modules_purchase_order_type import ModulesPurchaseOrderType
from typing import Optional, Set
from typing_extensions import Self

class IPurchaseOrderByFilter(BaseModel):
    """
    IPurchaseOrderByFilter
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, alias="Id")
    channel_id: Optional[StrictInt] = Field(default=None, alias="ChannelId")
    channel_name: Optional[StrictStr] = Field(default=None, alias="ChannelName")
    global_channel_name: Optional[StrictStr] = Field(default=None, alias="GlobalChannelName")
    global_channel_id: Optional[StrictInt] = Field(default=None, alias="GlobalChannelId")
    channel_purchase_order_no: Optional[StrictStr] = Field(default=None, alias="ChannelPurchaseOrderNo")
    merchant_purchase_order_no: Optional[StrictStr] = Field(default=None, alias="MerchantPurchaseOrderNo")
    status: Optional[ModulesPurchaseOrderStatus] = Field(default=None, alias="Status")
    created_at: Optional[datetime] = Field(default=None, alias="CreatedAt")
    updated_at: Optional[datetime] = Field(default=None, alias="UpdatedAt")
    type: Optional[ModulesPurchaseOrderType] = Field(default=None, alias="Type")
    from_ship_date: Optional[datetime] = Field(default=None, alias="FromShipDate")
    to_ship_date: Optional[datetime] = Field(default=None, alias="ToShipDate")
    from_delivery_date: Optional[datetime] = Field(default=None, alias="FromDeliveryDate")
    to_delivery_date: Optional[datetime] = Field(default=None, alias="ToDeliveryDate")
    import_information: Optional[IImportInformation] = Field(default=None, alias="ImportInformation")
    selling_party: Optional[IVendorParty] = Field(default=None, alias="SellingParty")
    ship_to_party: Optional[IVendorParty] = Field(default=None, alias="ShipToParty")
    buying_party: Optional[IVendorParty] = Field(default=None, alias="BuyingParty")
    billing_party: Optional[IVendorParty] = Field(default=None, alias="BillingParty")
    lines: Optional[List[IPurchaseOrderLineByFilter]] = Field(default=None, alias="Lines")
    __properties: ClassVar[List[str]] = ["Id", "ChannelId", "ChannelName", "GlobalChannelName", "GlobalChannelId", "ChannelPurchaseOrderNo", "MerchantPurchaseOrderNo", "Status", "CreatedAt", "UpdatedAt", "Type", "FromShipDate", "ToShipDate", "FromDeliveryDate", "ToDeliveryDate", "ImportInformation", "SellingParty", "ShipToParty", "BuyingParty", "BillingParty", "Lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPurchaseOrderByFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of import_information
        if self.import_information:
            _dict['ImportInformation'] = self.import_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selling_party
        if self.selling_party:
            _dict['SellingParty'] = self.selling_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to_party
        if self.ship_to_party:
            _dict['ShipToParty'] = self.ship_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buying_party
        if self.buying_party:
            _dict['BuyingParty'] = self.buying_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_party
        if self.billing_party:
            _dict['BillingParty'] = self.billing_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Lines'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if channel_name (nullable) is None
        # and model_fields_set contains the field
        if self.channel_name is None and "channel_name" in self.model_fields_set:
            _dict['ChannelName'] = None

        # set to None if global_channel_name (nullable) is None
        # and model_fields_set contains the field
        if self.global_channel_name is None and "global_channel_name" in self.model_fields_set:
            _dict['GlobalChannelName'] = None

        # set to None if global_channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_channel_id is None and "global_channel_id" in self.model_fields_set:
            _dict['GlobalChannelId'] = None

        # set to None if channel_purchase_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_purchase_order_no is None and "channel_purchase_order_no" in self.model_fields_set:
            _dict['ChannelPurchaseOrderNo'] = None

        # set to None if merchant_purchase_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_purchase_order_no is None and "merchant_purchase_order_no" in self.model_fields_set:
            _dict['MerchantPurchaseOrderNo'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['CreatedAt'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['UpdatedAt'] = None

        # set to None if from_ship_date (nullable) is None
        # and model_fields_set contains the field
        if self.from_ship_date is None and "from_ship_date" in self.model_fields_set:
            _dict['FromShipDate'] = None

        # set to None if to_ship_date (nullable) is None
        # and model_fields_set contains the field
        if self.to_ship_date is None and "to_ship_date" in self.model_fields_set:
            _dict['ToShipDate'] = None

        # set to None if from_delivery_date (nullable) is None
        # and model_fields_set contains the field
        if self.from_delivery_date is None and "from_delivery_date" in self.model_fields_set:
            _dict['FromDeliveryDate'] = None

        # set to None if to_delivery_date (nullable) is None
        # and model_fields_set contains the field
        if self.to_delivery_date is None and "to_delivery_date" in self.model_fields_set:
            _dict['ToDeliveryDate'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['Lines'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPurchaseOrderByFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "ChannelId": obj.get("ChannelId"),
            "ChannelName": obj.get("ChannelName"),
            "GlobalChannelName": obj.get("GlobalChannelName"),
            "GlobalChannelId": obj.get("GlobalChannelId"),
            "ChannelPurchaseOrderNo": obj.get("ChannelPurchaseOrderNo"),
            "MerchantPurchaseOrderNo": obj.get("MerchantPurchaseOrderNo"),
            "Status": obj.get("Status"),
            "CreatedAt": obj.get("CreatedAt"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "Type": obj.get("Type"),
            "FromShipDate": obj.get("FromShipDate"),
            "ToShipDate": obj.get("ToShipDate"),
            "FromDeliveryDate": obj.get("FromDeliveryDate"),
            "ToDeliveryDate": obj.get("ToDeliveryDate"),
            "ImportInformation": IImportInformation.from_dict(obj["ImportInformation"]) if obj.get("ImportInformation") is not None else None,
            "SellingParty": IVendorParty.from_dict(obj["SellingParty"]) if obj.get("SellingParty") is not None else None,
            "ShipToParty": IVendorParty.from_dict(obj["ShipToParty"]) if obj.get("ShipToParty") is not None else None,
            "BuyingParty": IVendorParty.from_dict(obj["BuyingParty"]) if obj.get("BuyingParty") is not None else None,
            "BillingParty": IVendorParty.from_dict(obj["BillingParty"]) if obj.get("BillingParty") is not None else None,
            "Lines": [IPurchaseOrderLineByFilter.from_dict(_item) for _item in obj["Lines"]] if obj.get("Lines") is not None else None
        })
        return _obj


