# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.merchant_purchase_order_invoice_line import MerchantPurchaseOrderInvoiceLine
from openapi_client.models.merchant_vendor_party import MerchantVendorParty
from openapi_client.models.modules_purchase_order_invoice_type import ModulesPurchaseOrderInvoiceType
from openapi_client.models.purchase_order_invoice_additional_details import PurchaseOrderInvoiceAdditionalDetails
from typing import Optional, Set
from typing_extensions import Self

class MerchantPurchaseOrderInvoice(BaseModel):
    """
    MerchantPurchaseOrderInvoice
    """ # noqa: E501
    invoice_no: Optional[StrictStr] = Field(default=None, alias="InvoiceNo")
    invoice_type: Optional[ModulesPurchaseOrderInvoiceType] = Field(default=None, alias="InvoiceType")
    invoice_total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="InvoiceTotalAmount")
    invoice_total_currency_code: Optional[StrictStr] = Field(default=None, alias="InvoiceTotalCurrencyCode")
    remit_to_party: Optional[MerchantVendorParty] = Field(default=None, alias="RemitToParty")
    ship_to_party_id: Optional[StrictInt] = Field(default=None, alias="ShipToPartyId")
    bill_to_party_id: Optional[StrictInt] = Field(default=None, alias="BillToPartyId")
    additional_details: Optional[List[PurchaseOrderInvoiceAdditionalDetails]] = Field(default=None, alias="AdditionalDetails")
    lines: Optional[List[MerchantPurchaseOrderInvoiceLine]] = Field(default=None, alias="Lines")
    __properties: ClassVar[List[str]] = ["InvoiceNo", "InvoiceType", "InvoiceTotalAmount", "InvoiceTotalCurrencyCode", "RemitToParty", "ShipToPartyId", "BillToPartyId", "AdditionalDetails", "Lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantPurchaseOrderInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remit_to_party
        if self.remit_to_party:
            _dict['RemitToParty'] = self.remit_to_party.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_details (list)
        _items = []
        if self.additional_details:
            for _item in self.additional_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AdditionalDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Lines'] = _items
        # set to None if invoice_no (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_no is None and "invoice_no" in self.model_fields_set:
            _dict['InvoiceNo'] = None

        # set to None if invoice_total_currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_total_currency_code is None and "invoice_total_currency_code" in self.model_fields_set:
            _dict['InvoiceTotalCurrencyCode'] = None

        # set to None if ship_to_party_id (nullable) is None
        # and model_fields_set contains the field
        if self.ship_to_party_id is None and "ship_to_party_id" in self.model_fields_set:
            _dict['ShipToPartyId'] = None

        # set to None if bill_to_party_id (nullable) is None
        # and model_fields_set contains the field
        if self.bill_to_party_id is None and "bill_to_party_id" in self.model_fields_set:
            _dict['BillToPartyId'] = None

        # set to None if additional_details (nullable) is None
        # and model_fields_set contains the field
        if self.additional_details is None and "additional_details" in self.model_fields_set:
            _dict['AdditionalDetails'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['Lines'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantPurchaseOrderInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "InvoiceNo": obj.get("InvoiceNo"),
            "InvoiceType": obj.get("InvoiceType"),
            "InvoiceTotalAmount": obj.get("InvoiceTotalAmount"),
            "InvoiceTotalCurrencyCode": obj.get("InvoiceTotalCurrencyCode"),
            "RemitToParty": MerchantVendorParty.from_dict(obj["RemitToParty"]) if obj.get("RemitToParty") is not None else None,
            "ShipToPartyId": obj.get("ShipToPartyId"),
            "BillToPartyId": obj.get("BillToPartyId"),
            "AdditionalDetails": [PurchaseOrderInvoiceAdditionalDetails.from_dict(_item) for _item in obj["AdditionalDetails"]] if obj.get("AdditionalDetails") is not None else None,
            "Lines": [MerchantPurchaseOrderInvoiceLine.from_dict(_item) for _item in obj["Lines"]] if obj.get("Lines") is not None else None
        })
        return _obj


