# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.merchant_product_extra_data_item_response import MerchantProductExtraDataItemResponse
from openapi_client.models.vat_rate_type import VatRateType
from typing import Optional, Set
from typing_extensions import Self

class MerchantProductResponse(BaseModel):
    """
    MerchantProductResponse
    """ # noqa: E501
    is_active: Optional[StrictBool] = Field(default=None, description="Is the product active for the Merchant?.", alias="IsActive")
    extra_data: Optional[List[MerchantProductExtraDataItemResponse]] = Field(default=None, alias="ExtraData")
    parent_merchant_product_no: Optional[StrictStr] = Field(default=None, description="A unique identifier of the parent product. (parent sku).", alias="ParentMerchantProductNo")
    parent_merchant_product_no2: Optional[StrictStr] = Field(default=None, description="A unique identifier of the grandparent product. (grandparent sku).", alias="ParentMerchantProductNo2")
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="The name of the product.", alias="Name")
    description: Optional[StrictStr] = Field(default=None, description="A description of the product. Can contain these HTML tags:  div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.", alias="Description")
    brand: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="The brand of the product.", alias="Brand")
    size: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..", alias="Size")
    color: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="Optional. The color of the product (variant).", alias="Color")
    ean: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="The EAN of GTIN of the product.", alias="Ean")
    manufacturer_product_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="The unique product reference used by the manufacturer/vendor of the product.", alias="ManufacturerProductNumber")
    merchant_product_no: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(description="A unique identifier of the product. (sku).", alias="MerchantProductNo")
    stock: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of items in stock.", alias="Stock")
    price: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Price, including VAT.", alias="Price")
    min_price: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Min price, including VAT.", alias="MinPrice")
    max_price: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Max price, including VAT.", alias="MaxPrice")
    msrp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Manufacturer's suggested retail price.", alias="MSRP")
    purchase_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. The purchase price of the product. Useful for repricing.", alias="PurchasePrice")
    vat_rate_type: Optional[VatRateType] = Field(default=None, alias="VatRateType")
    shipping_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Shipping cost of the product.", alias="ShippingCost")
    shipping_time: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, description="A textual representation of the shippingtime.  For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.", alias="ShippingTime")
    url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="A URL pointing to the merchant's webpage  which displays this product.", alias="Url")
    image_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="A URL at which an image of this product  can be found.", alias="ImageUrl")
    extra_image_url1: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (1).", alias="ExtraImageUrl1")
    extra_image_url2: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (2).", alias="ExtraImageUrl2")
    extra_image_url3: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (3).", alias="ExtraImageUrl3")
    extra_image_url4: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (4).", alias="ExtraImageUrl4")
    extra_image_url5: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (5).", alias="ExtraImageUrl5")
    extra_image_url6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (6).", alias="ExtraImageUrl6")
    extra_image_url7: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (7).", alias="ExtraImageUrl7")
    extra_image_url8: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (8).", alias="ExtraImageUrl8")
    extra_image_url9: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, description="Url to an additional image of product (9).", alias="ExtraImageUrl9")
    is_frozen: Optional[StrictBool] = Field(default=None, description="Specifies whether Product is disabled on all channels.", alias="IsFrozen")
    category_trail: Optional[StrictStr] = Field(default=None, description="The category to which this product belongs.  Please supply this field in the following format:  'maincategory > category > subcategory'  For example:  'vehicles > bikes > mountainbike'.", alias="CategoryTrail")
    __properties: ClassVar[List[str]] = ["IsActive", "ExtraData", "ParentMerchantProductNo", "ParentMerchantProductNo2", "Name", "Description", "Brand", "Size", "Color", "Ean", "ManufacturerProductNumber", "MerchantProductNo", "Stock", "Price", "MinPrice", "MaxPrice", "MSRP", "PurchasePrice", "VatRateType", "ShippingCost", "ShippingTime", "Url", "ImageUrl", "ExtraImageUrl1", "ExtraImageUrl2", "ExtraImageUrl3", "ExtraImageUrl4", "ExtraImageUrl5", "ExtraImageUrl6", "ExtraImageUrl7", "ExtraImageUrl8", "ExtraImageUrl9", "IsFrozen", "CategoryTrail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantProductResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extra_data (list)
        _items = []
        if self.extra_data:
            for _item in self.extra_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ExtraData'] = _items
        # set to None if extra_data (nullable) is None
        # and model_fields_set contains the field
        if self.extra_data is None and "extra_data" in self.model_fields_set:
            _dict['ExtraData'] = None

        # set to None if parent_merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.parent_merchant_product_no is None and "parent_merchant_product_no" in self.model_fields_set:
            _dict['ParentMerchantProductNo'] = None

        # set to None if parent_merchant_product_no2 (nullable) is None
        # and model_fields_set contains the field
        if self.parent_merchant_product_no2 is None and "parent_merchant_product_no2" in self.model_fields_set:
            _dict['ParentMerchantProductNo2'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if brand (nullable) is None
        # and model_fields_set contains the field
        if self.brand is None and "brand" in self.model_fields_set:
            _dict['Brand'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['Size'] = None

        # set to None if color (nullable) is None
        # and model_fields_set contains the field
        if self.color is None and "color" in self.model_fields_set:
            _dict['Color'] = None

        # set to None if ean (nullable) is None
        # and model_fields_set contains the field
        if self.ean is None and "ean" in self.model_fields_set:
            _dict['Ean'] = None

        # set to None if manufacturer_product_number (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturer_product_number is None and "manufacturer_product_number" in self.model_fields_set:
            _dict['ManufacturerProductNumber'] = None

        # set to None if min_price (nullable) is None
        # and model_fields_set contains the field
        if self.min_price is None and "min_price" in self.model_fields_set:
            _dict['MinPrice'] = None

        # set to None if max_price (nullable) is None
        # and model_fields_set contains the field
        if self.max_price is None and "max_price" in self.model_fields_set:
            _dict['MaxPrice'] = None

        # set to None if msrp (nullable) is None
        # and model_fields_set contains the field
        if self.msrp is None and "msrp" in self.model_fields_set:
            _dict['MSRP'] = None

        # set to None if purchase_price (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_price is None and "purchase_price" in self.model_fields_set:
            _dict['PurchasePrice'] = None

        # set to None if shipping_cost (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_cost is None and "shipping_cost" in self.model_fields_set:
            _dict['ShippingCost'] = None

        # set to None if shipping_time (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_time is None and "shipping_time" in self.model_fields_set:
            _dict['ShippingTime'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['Url'] = None

        # set to None if image_url (nullable) is None
        # and model_fields_set contains the field
        if self.image_url is None and "image_url" in self.model_fields_set:
            _dict['ImageUrl'] = None

        # set to None if extra_image_url1 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url1 is None and "extra_image_url1" in self.model_fields_set:
            _dict['ExtraImageUrl1'] = None

        # set to None if extra_image_url2 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url2 is None and "extra_image_url2" in self.model_fields_set:
            _dict['ExtraImageUrl2'] = None

        # set to None if extra_image_url3 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url3 is None and "extra_image_url3" in self.model_fields_set:
            _dict['ExtraImageUrl3'] = None

        # set to None if extra_image_url4 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url4 is None and "extra_image_url4" in self.model_fields_set:
            _dict['ExtraImageUrl4'] = None

        # set to None if extra_image_url5 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url5 is None and "extra_image_url5" in self.model_fields_set:
            _dict['ExtraImageUrl5'] = None

        # set to None if extra_image_url6 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url6 is None and "extra_image_url6" in self.model_fields_set:
            _dict['ExtraImageUrl6'] = None

        # set to None if extra_image_url7 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url7 is None and "extra_image_url7" in self.model_fields_set:
            _dict['ExtraImageUrl7'] = None

        # set to None if extra_image_url8 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url8 is None and "extra_image_url8" in self.model_fields_set:
            _dict['ExtraImageUrl8'] = None

        # set to None if extra_image_url9 (nullable) is None
        # and model_fields_set contains the field
        if self.extra_image_url9 is None and "extra_image_url9" in self.model_fields_set:
            _dict['ExtraImageUrl9'] = None

        # set to None if category_trail (nullable) is None
        # and model_fields_set contains the field
        if self.category_trail is None and "category_trail" in self.model_fields_set:
            _dict['CategoryTrail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantProductResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IsActive": obj.get("IsActive"),
            "ExtraData": [MerchantProductExtraDataItemResponse.from_dict(_item) for _item in obj["ExtraData"]] if obj.get("ExtraData") is not None else None,
            "ParentMerchantProductNo": obj.get("ParentMerchantProductNo"),
            "ParentMerchantProductNo2": obj.get("ParentMerchantProductNo2"),
            "Name": obj.get("Name"),
            "Description": obj.get("Description"),
            "Brand": obj.get("Brand"),
            "Size": obj.get("Size"),
            "Color": obj.get("Color"),
            "Ean": obj.get("Ean"),
            "ManufacturerProductNumber": obj.get("ManufacturerProductNumber"),
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "Stock": obj.get("Stock"),
            "Price": obj.get("Price"),
            "MinPrice": obj.get("MinPrice"),
            "MaxPrice": obj.get("MaxPrice"),
            "MSRP": obj.get("MSRP"),
            "PurchasePrice": obj.get("PurchasePrice"),
            "VatRateType": obj.get("VatRateType"),
            "ShippingCost": obj.get("ShippingCost"),
            "ShippingTime": obj.get("ShippingTime"),
            "Url": obj.get("Url"),
            "ImageUrl": obj.get("ImageUrl"),
            "ExtraImageUrl1": obj.get("ExtraImageUrl1"),
            "ExtraImageUrl2": obj.get("ExtraImageUrl2"),
            "ExtraImageUrl3": obj.get("ExtraImageUrl3"),
            "ExtraImageUrl4": obj.get("ExtraImageUrl4"),
            "ExtraImageUrl5": obj.get("ExtraImageUrl5"),
            "ExtraImageUrl6": obj.get("ExtraImageUrl6"),
            "ExtraImageUrl7": obj.get("ExtraImageUrl7"),
            "ExtraImageUrl8": obj.get("ExtraImageUrl8"),
            "ExtraImageUrl9": obj.get("ExtraImageUrl9"),
            "IsFrozen": obj.get("IsFrozen"),
            "CategoryTrail": obj.get("CategoryTrail")
        })
        return _obj


