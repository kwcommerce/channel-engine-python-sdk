# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.merchant_address_response import MerchantAddressResponse
from openapi_client.models.merchant_order_line_response import MerchantOrderLineResponse
from openapi_client.models.order_status_view import OrderStatusView
from openapi_client.models.order_support import OrderSupport
from typing import Optional, Set
from typing_extensions import Self

class MerchantOrderResponse(BaseModel):
    """
    MerchantOrderResponse
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.", alias="Id")
    channel_name: Optional[StrictStr] = Field(default=None, description="The name of the channel for this specific environment/account.", alias="ChannelName")
    channel_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the channel for this specific environment/account.", alias="ChannelId")
    global_channel_name: Optional[StrictStr] = Field(default=None, description="The name of the channel across all of ChannelEngine.", alias="GlobalChannelName")
    global_channel_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the channel across all of ChannelEngine.", alias="GlobalChannelId")
    channel_order_support: Optional[OrderSupport] = Field(default=None, alias="ChannelOrderSupport")
    channel_order_no: Optional[StrictStr] = Field(default=None, description="The order reference used by the channel.  This number is not guaranteed to be unique accross all orders,  because different channels can use the same order number format.", alias="ChannelOrderNo")
    commercial_order_no: Optional[StrictStr] = Field(default=None, description="The order reference used by the channel for commercial purposes (e.g. on the invoice). Can be different from the ChannelOrderNo.  For example when the internal unique order reference is a unique id or guid, while the commercial order reference is (usually) a human readable reference that can be reused or used for multiple sellers by the channel.", alias="CommercialOrderNo")
    merchant_order_no: Optional[StrictStr] = Field(default=None, description="The unique order reference used by the Merchant", alias="MerchantOrderNo")
    status: Optional[OrderStatusView] = Field(default=None, alias="Status")
    is_business_order: Optional[StrictBool] = Field(default=None, description="Indicating whether the order is a business order.", alias="IsBusinessOrder")
    acknowledged_date: Optional[datetime] = Field(default=None, description="The date the order was acknowledged in ChannelEngine.", alias="AcknowledgedDate")
    created_at: Optional[datetime] = Field(default=None, description="The date the order was created in ChannelEngine.", alias="CreatedAt")
    updated_at: Optional[datetime] = Field(default=None, description="The date the order was last updated in ChannelEngine.", alias="UpdatedAt")
    merchant_comment: Optional[StrictStr] = Field(default=None, description="The optional comment a merchant can add to an order.", alias="MerchantComment")
    billing_address: Optional[MerchantAddressResponse] = Field(default=None, alias="BillingAddress")
    shipping_address: Optional[MerchantAddressResponse] = Field(default=None, alias="ShippingAddress")
    sub_total_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the order lines including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="SubTotalInclVat")
    sub_total_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the order lines  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="SubTotalVat")
    shipping_costs_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the shipping fee  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="ShippingCostsVat")
    total_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the order including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="TotalInclVat")
    total_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the total value of te order  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="TotalVat")
    original_sub_total_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the order lines including VAT  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalSubTotalInclVat")
    original_sub_total_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the order lines  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalSubTotalVat")
    original_shipping_costs_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The shipping fee including VAT  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalShippingCostsInclVat")
    original_shipping_costs_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalShippingCostsVat")
    original_total_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the order including VAT  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalTotalInclVat")
    original_total_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalTotalVat")
    sub_total_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SubTotalExclVat")
    total_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalExclVat")
    shipping_costs_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShippingCostsExclVat")
    original_sub_total_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OriginalSubTotalExclVat")
    original_shipping_costs_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OriginalShippingCostsExclVat")
    original_total_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OriginalTotalExclVat")
    lines: Optional[List[MerchantOrderLineResponse]] = Field(default=None, alias="Lines")
    shipping_costs_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShippingCostsInclVat")
    phone: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The customer's telephone number.", alias="Phone")
    email: Annotated[str, Field(min_length=0, strict=True, max_length=250)] = Field(description="The customer's email.", alias="Email")
    language_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2)]] = Field(default=None, description="The language of the order. Has to be a 2-letter ISO language code.", alias="LanguageCode")
    company_registration_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Optional. A company's chamber of commerce number.", alias="CompanyRegistrationNo")
    vat_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Optional. A company's VAT number.", alias="VatNo")
    payment_method: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The payment method used on the order.", alias="PaymentMethod")
    payment_reference_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=250)]] = Field(default=None, description="Reference or transaction id for the payment", alias="PaymentReferenceNo")
    currency_code: Annotated[str, Field(min_length=1, strict=True, max_length=3)] = Field(description="The currency code for the amounts of the order.", alias="CurrencyCode")
    order_date: datetime = Field(description="The date the order was created at the channel.", alias="OrderDate")
    channel_customer_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The unique customer reference used by the channel.", alias="ChannelCustomerNo")
    extra_data: Optional[Dict[str, Optional[StrictStr]]] = Field(default=None, description="Extra data on the order.", alias="ExtraData")
    __properties: ClassVar[List[str]] = ["Id", "ChannelName", "ChannelId", "GlobalChannelName", "GlobalChannelId", "ChannelOrderSupport", "ChannelOrderNo", "CommercialOrderNo", "MerchantOrderNo", "Status", "IsBusinessOrder", "AcknowledgedDate", "CreatedAt", "UpdatedAt", "MerchantComment", "BillingAddress", "ShippingAddress", "SubTotalInclVat", "SubTotalVat", "ShippingCostsVat", "TotalInclVat", "TotalVat", "OriginalSubTotalInclVat", "OriginalSubTotalVat", "OriginalShippingCostsInclVat", "OriginalShippingCostsVat", "OriginalTotalInclVat", "OriginalTotalVat", "SubTotalExclVat", "TotalExclVat", "ShippingCostsExclVat", "OriginalSubTotalExclVat", "OriginalShippingCostsExclVat", "OriginalTotalExclVat", "Lines", "ShippingCostsInclVat", "Phone", "Email", "LanguageCode", "CompanyRegistrationNo", "VatNo", "PaymentMethod", "PaymentReferenceNo", "CurrencyCode", "OrderDate", "ChannelCustomerNo", "ExtraData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantOrderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['BillingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['ShippingAddress'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Lines'] = _items
        # set to None if channel_name (nullable) is None
        # and model_fields_set contains the field
        if self.channel_name is None and "channel_name" in self.model_fields_set:
            _dict['ChannelName'] = None

        # set to None if channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.channel_id is None and "channel_id" in self.model_fields_set:
            _dict['ChannelId'] = None

        # set to None if global_channel_name (nullable) is None
        # and model_fields_set contains the field
        if self.global_channel_name is None and "global_channel_name" in self.model_fields_set:
            _dict['GlobalChannelName'] = None

        # set to None if global_channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_channel_id is None and "global_channel_id" in self.model_fields_set:
            _dict['GlobalChannelId'] = None

        # set to None if channel_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_order_no is None and "channel_order_no" in self.model_fields_set:
            _dict['ChannelOrderNo'] = None

        # set to None if commercial_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.commercial_order_no is None and "commercial_order_no" in self.model_fields_set:
            _dict['CommercialOrderNo'] = None

        # set to None if merchant_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_order_no is None and "merchant_order_no" in self.model_fields_set:
            _dict['MerchantOrderNo'] = None

        # set to None if acknowledged_date (nullable) is None
        # and model_fields_set contains the field
        if self.acknowledged_date is None and "acknowledged_date" in self.model_fields_set:
            _dict['AcknowledgedDate'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['CreatedAt'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['UpdatedAt'] = None

        # set to None if merchant_comment (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_comment is None and "merchant_comment" in self.model_fields_set:
            _dict['MerchantComment'] = None

        # set to None if sub_total_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.sub_total_incl_vat is None and "sub_total_incl_vat" in self.model_fields_set:
            _dict['SubTotalInclVat'] = None

        # set to None if sub_total_vat (nullable) is None
        # and model_fields_set contains the field
        if self.sub_total_vat is None and "sub_total_vat" in self.model_fields_set:
            _dict['SubTotalVat'] = None

        # set to None if shipping_costs_vat (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_costs_vat is None and "shipping_costs_vat" in self.model_fields_set:
            _dict['ShippingCostsVat'] = None

        # set to None if total_vat (nullable) is None
        # and model_fields_set contains the field
        if self.total_vat is None and "total_vat" in self.model_fields_set:
            _dict['TotalVat'] = None

        # set to None if original_sub_total_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_sub_total_incl_vat is None and "original_sub_total_incl_vat" in self.model_fields_set:
            _dict['OriginalSubTotalInclVat'] = None

        # set to None if original_sub_total_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_sub_total_vat is None and "original_sub_total_vat" in self.model_fields_set:
            _dict['OriginalSubTotalVat'] = None

        # set to None if original_shipping_costs_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_shipping_costs_incl_vat is None and "original_shipping_costs_incl_vat" in self.model_fields_set:
            _dict['OriginalShippingCostsInclVat'] = None

        # set to None if original_shipping_costs_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_shipping_costs_vat is None and "original_shipping_costs_vat" in self.model_fields_set:
            _dict['OriginalShippingCostsVat'] = None

        # set to None if original_total_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_total_incl_vat is None and "original_total_incl_vat" in self.model_fields_set:
            _dict['OriginalTotalInclVat'] = None

        # set to None if original_total_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_total_vat is None and "original_total_vat" in self.model_fields_set:
            _dict['OriginalTotalVat'] = None

        # set to None if sub_total_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.sub_total_excl_vat is None and "sub_total_excl_vat" in self.model_fields_set:
            _dict['SubTotalExclVat'] = None

        # set to None if total_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.total_excl_vat is None and "total_excl_vat" in self.model_fields_set:
            _dict['TotalExclVat'] = None

        # set to None if shipping_costs_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_costs_excl_vat is None and "shipping_costs_excl_vat" in self.model_fields_set:
            _dict['ShippingCostsExclVat'] = None

        # set to None if original_sub_total_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_sub_total_excl_vat is None and "original_sub_total_excl_vat" in self.model_fields_set:
            _dict['OriginalSubTotalExclVat'] = None

        # set to None if original_shipping_costs_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_shipping_costs_excl_vat is None and "original_shipping_costs_excl_vat" in self.model_fields_set:
            _dict['OriginalShippingCostsExclVat'] = None

        # set to None if original_total_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_total_excl_vat is None and "original_total_excl_vat" in self.model_fields_set:
            _dict['OriginalTotalExclVat'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['Lines'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['Phone'] = None

        # set to None if language_code (nullable) is None
        # and model_fields_set contains the field
        if self.language_code is None and "language_code" in self.model_fields_set:
            _dict['LanguageCode'] = None

        # set to None if company_registration_no (nullable) is None
        # and model_fields_set contains the field
        if self.company_registration_no is None and "company_registration_no" in self.model_fields_set:
            _dict['CompanyRegistrationNo'] = None

        # set to None if vat_no (nullable) is None
        # and model_fields_set contains the field
        if self.vat_no is None and "vat_no" in self.model_fields_set:
            _dict['VatNo'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['PaymentMethod'] = None

        # set to None if payment_reference_no (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference_no is None and "payment_reference_no" in self.model_fields_set:
            _dict['PaymentReferenceNo'] = None

        # set to None if channel_customer_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_customer_no is None and "channel_customer_no" in self.model_fields_set:
            _dict['ChannelCustomerNo'] = None

        # set to None if extra_data (nullable) is None
        # and model_fields_set contains the field
        if self.extra_data is None and "extra_data" in self.model_fields_set:
            _dict['ExtraData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantOrderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "ChannelName": obj.get("ChannelName"),
            "ChannelId": obj.get("ChannelId"),
            "GlobalChannelName": obj.get("GlobalChannelName"),
            "GlobalChannelId": obj.get("GlobalChannelId"),
            "ChannelOrderSupport": obj.get("ChannelOrderSupport"),
            "ChannelOrderNo": obj.get("ChannelOrderNo"),
            "CommercialOrderNo": obj.get("CommercialOrderNo"),
            "MerchantOrderNo": obj.get("MerchantOrderNo"),
            "Status": obj.get("Status"),
            "IsBusinessOrder": obj.get("IsBusinessOrder"),
            "AcknowledgedDate": obj.get("AcknowledgedDate"),
            "CreatedAt": obj.get("CreatedAt"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "MerchantComment": obj.get("MerchantComment"),
            "BillingAddress": MerchantAddressResponse.from_dict(obj["BillingAddress"]) if obj.get("BillingAddress") is not None else None,
            "ShippingAddress": MerchantAddressResponse.from_dict(obj["ShippingAddress"]) if obj.get("ShippingAddress") is not None else None,
            "SubTotalInclVat": obj.get("SubTotalInclVat"),
            "SubTotalVat": obj.get("SubTotalVat"),
            "ShippingCostsVat": obj.get("ShippingCostsVat"),
            "TotalInclVat": obj.get("TotalInclVat"),
            "TotalVat": obj.get("TotalVat"),
            "OriginalSubTotalInclVat": obj.get("OriginalSubTotalInclVat"),
            "OriginalSubTotalVat": obj.get("OriginalSubTotalVat"),
            "OriginalShippingCostsInclVat": obj.get("OriginalShippingCostsInclVat"),
            "OriginalShippingCostsVat": obj.get("OriginalShippingCostsVat"),
            "OriginalTotalInclVat": obj.get("OriginalTotalInclVat"),
            "OriginalTotalVat": obj.get("OriginalTotalVat"),
            "SubTotalExclVat": obj.get("SubTotalExclVat"),
            "TotalExclVat": obj.get("TotalExclVat"),
            "ShippingCostsExclVat": obj.get("ShippingCostsExclVat"),
            "OriginalSubTotalExclVat": obj.get("OriginalSubTotalExclVat"),
            "OriginalShippingCostsExclVat": obj.get("OriginalShippingCostsExclVat"),
            "OriginalTotalExclVat": obj.get("OriginalTotalExclVat"),
            "Lines": [MerchantOrderLineResponse.from_dict(_item) for _item in obj["Lines"]] if obj.get("Lines") is not None else None,
            "ShippingCostsInclVat": obj.get("ShippingCostsInclVat"),
            "Phone": obj.get("Phone"),
            "Email": obj.get("Email"),
            "LanguageCode": obj.get("LanguageCode"),
            "CompanyRegistrationNo": obj.get("CompanyRegistrationNo"),
            "VatNo": obj.get("VatNo"),
            "PaymentMethod": obj.get("PaymentMethod"),
            "PaymentReferenceNo": obj.get("PaymentReferenceNo"),
            "CurrencyCode": obj.get("CurrencyCode"),
            "OrderDate": obj.get("OrderDate"),
            "ChannelCustomerNo": obj.get("ChannelCustomerNo"),
            "ExtraData": obj.get("ExtraData")
        })
        return _obj


