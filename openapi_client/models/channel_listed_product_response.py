# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.listed_product_channel_status import ListedProductChannelStatus
from openapi_client.models.listed_product_export_status import ListedProductExportStatus
from typing import Optional, Set
from typing_extensions import Self

class ChannelListedProductResponse(BaseModel):
    """
    ChannelListedProductResponse
    """ # noqa: E501
    channel_product_no: Optional[StrictStr] = Field(default=None, description="The unique product reference used by the Channel", alias="ChannelProductNo")
    channel_status: Optional[ListedProductChannelStatus] = Field(default=None, alias="ChannelStatus")
    ean: Optional[StrictStr] = Field(default=None, description="EAN", alias="Ean")
    export_status: Optional[ListedProductExportStatus] = Field(default=None, alias="ExportStatus")
    merchant_product_no: Optional[StrictStr] = Field(default=None, description="Your product number (SKU)", alias="MerchantProductNo")
    last_exported_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Your product last exported price", alias="LastExportedPrice")
    last_exported_stock: Optional[StrictInt] = Field(default=None, description="Your product last exported stock", alias="LastExportedStock")
    __properties: ClassVar[List[str]] = ["ChannelProductNo", "ChannelStatus", "Ean", "ExportStatus", "MerchantProductNo", "LastExportedPrice", "LastExportedStock"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelListedProductResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if channel_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_product_no is None and "channel_product_no" in self.model_fields_set:
            _dict['ChannelProductNo'] = None

        # set to None if ean (nullable) is None
        # and model_fields_set contains the field
        if self.ean is None and "ean" in self.model_fields_set:
            _dict['Ean'] = None

        # set to None if merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_product_no is None and "merchant_product_no" in self.model_fields_set:
            _dict['MerchantProductNo'] = None

        # set to None if last_exported_price (nullable) is None
        # and model_fields_set contains the field
        if self.last_exported_price is None and "last_exported_price" in self.model_fields_set:
            _dict['LastExportedPrice'] = None

        # set to None if last_exported_stock (nullable) is None
        # and model_fields_set contains the field
        if self.last_exported_stock is None and "last_exported_stock" in self.model_fields_set:
            _dict['LastExportedStock'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelListedProductResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChannelProductNo": obj.get("ChannelProductNo"),
            "ChannelStatus": obj.get("ChannelStatus"),
            "Ean": obj.get("Ean"),
            "ExportStatus": obj.get("ExportStatus"),
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "LastExportedPrice": obj.get("LastExportedPrice"),
            "LastExportedStock": obj.get("LastExportedStock")
        })
        return _obj


