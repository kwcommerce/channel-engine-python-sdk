# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.settings_response import SettingsResponse
from openapi_client.models.vat_settings_response import VatSettingsResponse
from typing import Optional, Set
from typing_extensions import Self

class MerchantSettingsResponse(BaseModel):
    """
    MerchantSettingsResponse
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    company_name: Optional[StrictStr] = Field(default=None, alias="CompanyName")
    currency_code: Optional[StrictStr] = Field(default=None, alias="CurrencyCode")
    default_culture_code: Optional[StrictStr] = Field(default=None, alias="DefaultCultureCode")
    settings: Optional[SettingsResponse] = Field(default=None, alias="Settings")
    vat: Optional[List[VatSettingsResponse]] = Field(default=None, alias="Vat")
    __properties: ClassVar[List[str]] = ["Name", "CompanyName", "CurrencyCode", "DefaultCultureCode", "Settings", "Vat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantSettingsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['Settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vat (list)
        _items = []
        if self.vat:
            for _item in self.vat:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Vat'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['CompanyName'] = None

        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['CurrencyCode'] = None

        # set to None if default_culture_code (nullable) is None
        # and model_fields_set contains the field
        if self.default_culture_code is None and "default_culture_code" in self.model_fields_set:
            _dict['DefaultCultureCode'] = None

        # set to None if vat (nullable) is None
        # and model_fields_set contains the field
        if self.vat is None and "vat" in self.model_fields_set:
            _dict['Vat'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantSettingsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "CompanyName": obj.get("CompanyName"),
            "CurrencyCode": obj.get("CurrencyCode"),
            "DefaultCultureCode": obj.get("DefaultCultureCode"),
            "Settings": SettingsResponse.from_dict(obj["Settings"]) if obj.get("Settings") is not None else None,
            "Vat": [VatSettingsResponse.from_dict(_item) for _item in obj["Vat"]] if obj.get("Vat") is not None else None
        })
        return _obj


