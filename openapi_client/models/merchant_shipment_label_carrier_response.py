# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.channel_carrier_collection_method_api import ChannelCarrierCollectionMethodApi
from openapi_client.models.channel_carrier_recommendation_api import ChannelCarrierRecommendationApi
from typing import Optional, Set
from typing_extensions import Self

class MerchantShipmentLabelCarrierResponse(BaseModel):
    """
    MerchantShipmentLabelCarrierResponse
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The channel's name for the shipping label carrier", alias="Name")
    code: Optional[StrictStr] = Field(default=None, description="The channel's code for the shipping label carrier", alias="Code")
    restrictions: Optional[StrictStr] = Field(default=None, description="Optional. Any restrictions on this carriers, e.g. weight and/or dimensions", alias="Restrictions")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Price for this shipping label", alias="Price")
    recommendation: Optional[ChannelCarrierRecommendationApi] = Field(default=None, alias="Recommendation")
    collection_method: Optional[ChannelCarrierCollectionMethodApi] = Field(default=None, alias="CollectionMethod")
    handover_date_time: Optional[datetime] = Field(default=None, description="Optional. When to handover the package to the carrier  It is in the ISO format including the timezone offset.  E.g. 2020-10-03T18:00:00+02:00  which is 3rd Oct 2020, at 18:00 PM in Amsterdam (Summer Time aka CEST: UTC +2:00 )", alias="HandoverDateTime")
    __properties: ClassVar[List[str]] = ["Name", "Code", "Restrictions", "Price", "Recommendation", "CollectionMethod", "HandoverDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantShipmentLabelCarrierResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['Code'] = None

        # set to None if restrictions (nullable) is None
        # and model_fields_set contains the field
        if self.restrictions is None and "restrictions" in self.model_fields_set:
            _dict['Restrictions'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['Price'] = None

        # set to None if handover_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.handover_date_time is None and "handover_date_time" in self.model_fields_set:
            _dict['HandoverDateTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantShipmentLabelCarrierResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "Code": obj.get("Code"),
            "Restrictions": obj.get("Restrictions"),
            "Price": obj.get("Price"),
            "Recommendation": obj.get("Recommendation"),
            "CollectionMethod": obj.get("CollectionMethod"),
            "HandoverDateTime": obj.get("HandoverDateTime")
        })
        return _obj


