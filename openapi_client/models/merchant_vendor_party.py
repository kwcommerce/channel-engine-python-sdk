# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.modules_tax_registration_type import ModulesTaxRegistrationType
from typing import Optional, Set
from typing_extensions import Self

class MerchantVendorParty(BaseModel):
    """
    MerchantVendorParty
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    address_line1: Optional[StrictStr] = Field(default=None, alias="AddressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="AddressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, alias="AddressLine3")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    county: Optional[StrictStr] = Field(default=None, alias="County")
    district: Optional[StrictStr] = Field(default=None, alias="District")
    state_or_region: Optional[StrictStr] = Field(default=None, alias="StateOrRegion")
    postal_code: Optional[StrictStr] = Field(default=None, alias="PostalCode")
    country_code: Optional[StrictStr] = Field(default=None, alias="CountryCode")
    phone: Optional[StrictStr] = Field(default=None, alias="Phone")
    tax_registration_type: Optional[ModulesTaxRegistrationType] = Field(default=None, alias="TaxRegistrationType")
    tax_registration_no: Optional[StrictStr] = Field(default=None, alias="TaxRegistrationNo")
    __properties: ClassVar[List[str]] = ["Name", "AddressLine1", "AddressLine2", "AddressLine3", "City", "County", "District", "StateOrRegion", "PostalCode", "CountryCode", "Phone", "TaxRegistrationType", "TaxRegistrationNo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantVendorParty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if address_line1 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line1 is None and "address_line1" in self.model_fields_set:
            _dict['AddressLine1'] = None

        # set to None if address_line2 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line2 is None and "address_line2" in self.model_fields_set:
            _dict['AddressLine2'] = None

        # set to None if address_line3 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line3 is None and "address_line3" in self.model_fields_set:
            _dict['AddressLine3'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['City'] = None

        # set to None if county (nullable) is None
        # and model_fields_set contains the field
        if self.county is None and "county" in self.model_fields_set:
            _dict['County'] = None

        # set to None if district (nullable) is None
        # and model_fields_set contains the field
        if self.district is None and "district" in self.model_fields_set:
            _dict['District'] = None

        # set to None if state_or_region (nullable) is None
        # and model_fields_set contains the field
        if self.state_or_region is None and "state_or_region" in self.model_fields_set:
            _dict['StateOrRegion'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['PostalCode'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['CountryCode'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['Phone'] = None

        # set to None if tax_registration_no (nullable) is None
        # and model_fields_set contains the field
        if self.tax_registration_no is None and "tax_registration_no" in self.model_fields_set:
            _dict['TaxRegistrationNo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantVendorParty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "AddressLine1": obj.get("AddressLine1"),
            "AddressLine2": obj.get("AddressLine2"),
            "AddressLine3": obj.get("AddressLine3"),
            "City": obj.get("City"),
            "County": obj.get("County"),
            "District": obj.get("District"),
            "StateOrRegion": obj.get("StateOrRegion"),
            "PostalCode": obj.get("PostalCode"),
            "CountryCode": obj.get("CountryCode"),
            "Phone": obj.get("Phone"),
            "TaxRegistrationType": obj.get("TaxRegistrationType"),
            "TaxRegistrationNo": obj.get("TaxRegistrationNo")
        })
        return _obj


