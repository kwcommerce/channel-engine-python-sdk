# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.modules_charge_details_type import ModulesChargeDetailsType
from openapi_client.models.purchase_order_invoice_tax_details import PurchaseOrderInvoiceTaxDetails
from typing import Optional, Set
from typing_extensions import Self

class PurchaseOrderInvoiceChargeDetails(BaseModel):
    """
    PurchaseOrderInvoiceChargeDetails
    """ # noqa: E501
    type: Optional[ModulesChargeDetailsType] = Field(default=None, alias="Type")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    charge_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ChargeAmount")
    charge_amount_currency_code: Optional[StrictStr] = Field(default=None, alias="ChargeAmountCurrencyCode")
    tax_details: Optional[PurchaseOrderInvoiceTaxDetails] = Field(default=None, alias="TaxDetails")
    __properties: ClassVar[List[str]] = ["Type", "Description", "ChargeAmount", "ChargeAmountCurrencyCode", "TaxDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseOrderInvoiceChargeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tax_details
        if self.tax_details:
            _dict['TaxDetails'] = self.tax_details.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if charge_amount (nullable) is None
        # and model_fields_set contains the field
        if self.charge_amount is None and "charge_amount" in self.model_fields_set:
            _dict['ChargeAmount'] = None

        # set to None if charge_amount_currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.charge_amount_currency_code is None and "charge_amount_currency_code" in self.model_fields_set:
            _dict['ChargeAmountCurrencyCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseOrderInvoiceChargeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Type": obj.get("Type"),
            "Description": obj.get("Description"),
            "ChargeAmount": obj.get("ChargeAmount"),
            "ChargeAmountCurrencyCode": obj.get("ChargeAmountCurrencyCode"),
            "TaxDetails": PurchaseOrderInvoiceTaxDetails.from_dict(obj["TaxDetails"]) if obj.get("TaxDetails") is not None else None
        })
        return _obj


