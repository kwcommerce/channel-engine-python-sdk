# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MerchantStockPriceUpdateRequest(BaseModel):
    """
    MerchantStockPriceUpdateRequest
    """ # noqa: E501
    merchant_product_no: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(description="The unique product reference used by the Merchant (sku).", alias="MerchantProductNo")
    stock: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The stock of the product. Should not be negative.", alias="Stock")
    price: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The price of the product. Should not be negative.", alias="Price")
    stock_location_id: Optional[StrictInt] = Field(default=None, description="The stock location id of the updated stock. If not provided, the stock from the default stock location will be updated.", alias="StockLocationId")
    __properties: ClassVar[List[str]] = ["MerchantProductNo", "Stock", "Price", "StockLocationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantStockPriceUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if stock (nullable) is None
        # and model_fields_set contains the field
        if self.stock is None and "stock" in self.model_fields_set:
            _dict['Stock'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['Price'] = None

        # set to None if stock_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.stock_location_id is None and "stock_location_id" in self.model_fields_set:
            _dict['StockLocationId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantStockPriceUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "Stock": obj.get("Stock"),
            "Price": obj.get("Price"),
            "StockLocationId": obj.get("StockLocationId")
        })
        return _obj


