# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.merchant_order_line_response import MerchantOrderLineResponse
from openapi_client.models.shipment_line_status import ShipmentLineStatus
from typing import Optional, Set
from typing_extensions import Self

class MerchantSingleOrderReturnLineResponse(BaseModel):
    """
    MerchantSingleOrderReturnLineResponse
    """ # noqa: E501
    merchant_product_no: Optional[StrictStr] = Field(default=None, description="The unique product reference used by the Merchant (sku).", alias="MerchantProductNo")
    accepted_quantity: Optional[StrictInt] = Field(default=None, description="The accepted quantity of returned products in this orderline.", alias="AcceptedQuantity")
    rejected_quantity: Optional[StrictInt] = Field(default=None, description="The rejected quantity of returned products in this orderline.", alias="RejectedQuantity")
    order_line: Optional[MerchantOrderLineResponse] = Field(default=None, alias="OrderLine")
    shipment_status: Optional[ShipmentLineStatus] = Field(default=None, alias="ShipmentStatus")
    quantity: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of items of the product in this return.", alias="Quantity")
    extra_data: Optional[Dict[str, Optional[StrictStr]]] = Field(default=None, description="Extra data on the returnline. Each item must have an unqiue key", alias="ExtraData")
    __properties: ClassVar[List[str]] = ["MerchantProductNo", "AcceptedQuantity", "RejectedQuantity", "OrderLine", "ShipmentStatus", "Quantity", "ExtraData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantSingleOrderReturnLineResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order_line
        if self.order_line:
            _dict['OrderLine'] = self.order_line.to_dict()
        # set to None if merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_product_no is None and "merchant_product_no" in self.model_fields_set:
            _dict['MerchantProductNo'] = None

        # set to None if accepted_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_quantity is None and "accepted_quantity" in self.model_fields_set:
            _dict['AcceptedQuantity'] = None

        # set to None if rejected_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.rejected_quantity is None and "rejected_quantity" in self.model_fields_set:
            _dict['RejectedQuantity'] = None

        # set to None if extra_data (nullable) is None
        # and model_fields_set contains the field
        if self.extra_data is None and "extra_data" in self.model_fields_set:
            _dict['ExtraData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantSingleOrderReturnLineResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "AcceptedQuantity": obj.get("AcceptedQuantity"),
            "RejectedQuantity": obj.get("RejectedQuantity"),
            "OrderLine": MerchantOrderLineResponse.from_dict(obj["OrderLine"]) if obj.get("OrderLine") is not None else None,
            "ShipmentStatus": obj.get("ShipmentStatus"),
            "Quantity": obj.get("Quantity"),
            "ExtraData": obj.get("ExtraData")
        })
        return _obj


