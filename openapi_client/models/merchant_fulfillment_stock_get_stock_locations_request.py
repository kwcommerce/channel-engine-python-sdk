# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MerchantFulfillmentStockGetStockLocationsRequest(BaseModel):
    """
    MerchantFulfillmentStockGetStockLocationsRequest
    """ # noqa: E501
    merchant_product_nos: Optional[List[StrictStr]] = Field(default=None, description="List of your products' MerchantProductNo's.", alias="MerchantProductNos")
    page_index: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="A page index to get the items (starts from 0)", alias="PageIndex")
    page_size: Optional[Annotated[int, Field(le=500, strict=True, ge=0)]] = Field(default=None, description="Number of items to return (default 100)", alias="PageSize")
    __properties: ClassVar[List[str]] = ["MerchantProductNos", "PageIndex", "PageSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantFulfillmentStockGetStockLocationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if merchant_product_nos (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_product_nos is None and "merchant_product_nos" in self.model_fields_set:
            _dict['MerchantProductNos'] = None

        # set to None if page_index (nullable) is None
        # and model_fields_set contains the field
        if self.page_index is None and "page_index" in self.model_fields_set:
            _dict['PageIndex'] = None

        # set to None if page_size (nullable) is None
        # and model_fields_set contains the field
        if self.page_size is None and "page_size" in self.model_fields_set:
            _dict['PageSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantFulfillmentStockGetStockLocationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MerchantProductNos": obj.get("MerchantProductNos"),
            "PageIndex": obj.get("PageIndex"),
            "PageSize": obj.get("PageSize")
        })
        return _obj


