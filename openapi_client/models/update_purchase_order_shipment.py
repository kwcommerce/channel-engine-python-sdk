# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.change_purchase_order_shipment_line import ChangePurchaseOrderShipmentLine
from openapi_client.models.shipment_type import ShipmentType
from openapi_client.models.volume_unit_of_measure import VolumeUnitOfMeasure
from openapi_client.models.weight_unit_of_measure import WeightUnitOfMeasure
from typing import Optional, Set
from typing_extensions import Self

class UpdatePurchaseOrderShipment(BaseModel):
    """
    UpdatePurchaseOrderShipment
    """ # noqa: E501
    merchant_shipment_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="The number the merchant uses to identify this PO shipment", alias="MerchantShipmentNo")
    shipment_type: Optional[ShipmentType] = Field(default=None, alias="ShipmentType")
    shipped_date: Optional[datetime] = Field(default=None, description="When the shipment will be/was shipped", alias="ShippedDate")
    estimated_delivery_date: Optional[datetime] = Field(default=None, description="Estimated delivery time in the channel's warehouse", alias="EstimatedDeliveryDate")
    selling_party_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The merchant's identifying 'selling party number' at the channel", alias="SellingPartyId")
    ship_to_party_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The destination's 'ship to party' number at the channel", alias="ShipToPartyId")
    bill_of_lading_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=64)]] = Field(default=None, description="Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.", alias="BillOfLadingNumber")
    shipment_weight_unit_of_measure: Optional[WeightUnitOfMeasure] = Field(default=None, alias="ShipmentWeightUnitOfMeasure")
    shipment_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The shipment's weight", alias="ShipmentWeight")
    shipment_volume_unit_of_measure: Optional[VolumeUnitOfMeasure] = Field(default=None, alias="ShipmentVolumeUnitOfMeasure")
    shipment_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The shipment's volume", alias="ShipmentVolume")
    lines: Optional[List[ChangePurchaseOrderShipmentLine]] = Field(default=None, description="Shipment information for each shipped product", alias="Lines")
    __properties: ClassVar[List[str]] = ["MerchantShipmentNo", "ShipmentType", "ShippedDate", "EstimatedDeliveryDate", "SellingPartyId", "ShipToPartyId", "BillOfLadingNumber", "ShipmentWeightUnitOfMeasure", "ShipmentWeight", "ShipmentVolumeUnitOfMeasure", "ShipmentVolume", "Lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePurchaseOrderShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Lines'] = _items
        # set to None if merchant_shipment_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_shipment_no is None and "merchant_shipment_no" in self.model_fields_set:
            _dict['MerchantShipmentNo'] = None

        # set to None if selling_party_id (nullable) is None
        # and model_fields_set contains the field
        if self.selling_party_id is None and "selling_party_id" in self.model_fields_set:
            _dict['SellingPartyId'] = None

        # set to None if ship_to_party_id (nullable) is None
        # and model_fields_set contains the field
        if self.ship_to_party_id is None and "ship_to_party_id" in self.model_fields_set:
            _dict['ShipToPartyId'] = None

        # set to None if bill_of_lading_number (nullable) is None
        # and model_fields_set contains the field
        if self.bill_of_lading_number is None and "bill_of_lading_number" in self.model_fields_set:
            _dict['BillOfLadingNumber'] = None

        # set to None if shipment_weight (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_weight is None and "shipment_weight" in self.model_fields_set:
            _dict['ShipmentWeight'] = None

        # set to None if shipment_volume (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_volume is None and "shipment_volume" in self.model_fields_set:
            _dict['ShipmentVolume'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['Lines'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePurchaseOrderShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MerchantShipmentNo": obj.get("MerchantShipmentNo"),
            "ShipmentType": obj.get("ShipmentType"),
            "ShippedDate": obj.get("ShippedDate"),
            "EstimatedDeliveryDate": obj.get("EstimatedDeliveryDate"),
            "SellingPartyId": obj.get("SellingPartyId"),
            "ShipToPartyId": obj.get("ShipToPartyId"),
            "BillOfLadingNumber": obj.get("BillOfLadingNumber"),
            "ShipmentWeightUnitOfMeasure": obj.get("ShipmentWeightUnitOfMeasure"),
            "ShipmentWeight": obj.get("ShipmentWeight"),
            "ShipmentVolumeUnitOfMeasure": obj.get("ShipmentVolumeUnitOfMeasure"),
            "ShipmentVolume": obj.get("ShipmentVolume"),
            "Lines": [ChangePurchaseOrderShipmentLine.from_dict(_item) for _item in obj["Lines"]] if obj.get("Lines") is not None else None
        })
        return _obj


