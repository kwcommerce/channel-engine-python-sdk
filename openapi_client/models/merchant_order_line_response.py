# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.condition import Condition
from openapi_client.models.merchant_order_line_extra_data_response import MerchantOrderLineExtraDataResponse
from openapi_client.models.merchant_stock_location_response import MerchantStockLocationResponse
from openapi_client.models.order_status_view import OrderStatusView
from typing import Optional, Set
from typing_extensions import Self

class MerchantOrderLineResponse(BaseModel):
    """
    MerchantOrderLineResponse
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The unique identifier used by ChannelEngine.", alias="Id")
    channel_order_line_no: Optional[StrictStr] = Field(default=None, description="The order line reference used by the channel.", alias="ChannelOrderLineNo")
    status: Optional[OrderStatusView] = Field(default=None, alias="Status")
    is_fulfillment_by_marketplace: Optional[StrictBool] = Field(default=None, description="Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?.", alias="IsFulfillmentByMarketplace")
    gtin: Optional[StrictStr] = Field(default=None, description="Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.", alias="Gtin")
    description: Optional[StrictStr] = Field(default=None, description="The product description (or title) provided by the channel.", alias="Description")
    stock_location: Optional[MerchantStockLocationResponse] = Field(default=None, alias="StockLocation")
    unit_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the value of a single unit of the ordered product  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="UnitVat")
    line_total_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the order line (quantity * unit price) including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="LineTotalInclVat")
    line_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="LineVat")
    original_unit_price_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of a single unit of the ordered product including VAT  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalUnitPriceInclVat")
    original_unit_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the value of a single unit of the ordered product  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalUnitVat")
    original_line_total_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the order line (quantity * unit price) including VAT  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalLineTotalInclVat")
    original_line_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the currency in which the order was paid for, see CurrencyCode).", alias="OriginalLineVat")
    original_fee_fixed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A percentage fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of client  This field is optional, send 0 if not applicable.", alias="OriginalFeeFixed")
    bundle_product_merchant_product_no: Optional[StrictStr] = Field(default=None, description="If the product is ordered part of a bundle, this field contains the MerchantProductNo of  the product bundle.", alias="BundleProductMerchantProductNo")
    juris_code: Optional[StrictStr] = Field(default=None, description="State assigned code identifying the jurisdiction.", alias="JurisCode")
    juris_name: Optional[StrictStr] = Field(default=None, description="Name of a tax jurisdiction.", alias="JurisName")
    vat_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="VAT rate of the orderline.", alias="VatRate")
    unit_price_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="UnitPriceExclVat")
    line_total_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="LineTotalExclVat")
    original_unit_price_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OriginalUnitPriceExclVat")
    original_line_total_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OriginalLineTotalExclVat")
    extra_data: Optional[List[MerchantOrderLineExtraDataResponse]] = Field(default=None, alias="ExtraData")
    channel_product_no: Annotated[str, Field(min_length=0, strict=True, max_length=60)] = Field(description="The unique product reference used by the channel.", alias="ChannelProductNo")
    merchant_product_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The unique product reference used by the merchant.", alias="MerchantProductNo")
    quantity: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of items of the product.", alias="Quantity")
    cancellation_requested_quantity: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of items for which cancellation was requested by the customer.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.  Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.", alias="CancellationRequestedQuantity")
    unit_price_incl_vat: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="The value of a single unit of the ordered product including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).", alias="UnitPriceInclVat")
    fee_fixed: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="A fixed fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of the Channel  This field is optional, send 0 if not applicable.", alias="FeeFixed")
    fee_rate: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.", alias="FeeRate")
    condition: Optional[Condition] = Field(default=None, alias="Condition")
    expected_delivery_date: Optional[datetime] = Field(default=None, description="Expected delivery date from channels, empty if channels not support this value", alias="ExpectedDeliveryDate")
    latest_delivery_date: Optional[datetime] = Field(default=None, description="Latest delivery date from channels, empty if channels not support this value", alias="LatestDeliveryDate")
    expected_shipment_date: Optional[datetime] = Field(default=None, description="Expected shipment date from channels, empty if channels not support this value", alias="ExpectedShipmentDate")
    latest_shipment_date: Optional[datetime] = Field(default=None, description="Latest shipment date from channels, empty if channels not support this value", alias="LatestShipmentDate")
    __properties: ClassVar[List[str]] = ["Id", "ChannelOrderLineNo", "Status", "IsFulfillmentByMarketplace", "Gtin", "Description", "StockLocation", "UnitVat", "LineTotalInclVat", "LineVat", "OriginalUnitPriceInclVat", "OriginalUnitVat", "OriginalLineTotalInclVat", "OriginalLineVat", "OriginalFeeFixed", "BundleProductMerchantProductNo", "JurisCode", "JurisName", "VatRate", "UnitPriceExclVat", "LineTotalExclVat", "OriginalUnitPriceExclVat", "OriginalLineTotalExclVat", "ExtraData", "ChannelProductNo", "MerchantProductNo", "Quantity", "CancellationRequestedQuantity", "UnitPriceInclVat", "FeeFixed", "FeeRate", "Condition", "ExpectedDeliveryDate", "LatestDeliveryDate", "ExpectedShipmentDate", "LatestShipmentDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantOrderLineResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stock_location
        if self.stock_location:
            _dict['StockLocation'] = self.stock_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extra_data (list)
        _items = []
        if self.extra_data:
            for _item in self.extra_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ExtraData'] = _items
        # set to None if channel_order_line_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_order_line_no is None and "channel_order_line_no" in self.model_fields_set:
            _dict['ChannelOrderLineNo'] = None

        # set to None if gtin (nullable) is None
        # and model_fields_set contains the field
        if self.gtin is None and "gtin" in self.model_fields_set:
            _dict['Gtin'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if unit_vat (nullable) is None
        # and model_fields_set contains the field
        if self.unit_vat is None and "unit_vat" in self.model_fields_set:
            _dict['UnitVat'] = None

        # set to None if line_total_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.line_total_incl_vat is None and "line_total_incl_vat" in self.model_fields_set:
            _dict['LineTotalInclVat'] = None

        # set to None if line_vat (nullable) is None
        # and model_fields_set contains the field
        if self.line_vat is None and "line_vat" in self.model_fields_set:
            _dict['LineVat'] = None

        # set to None if original_unit_price_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_unit_price_incl_vat is None and "original_unit_price_incl_vat" in self.model_fields_set:
            _dict['OriginalUnitPriceInclVat'] = None

        # set to None if original_unit_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_unit_vat is None and "original_unit_vat" in self.model_fields_set:
            _dict['OriginalUnitVat'] = None

        # set to None if original_line_total_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_line_total_incl_vat is None and "original_line_total_incl_vat" in self.model_fields_set:
            _dict['OriginalLineTotalInclVat'] = None

        # set to None if original_line_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_line_vat is None and "original_line_vat" in self.model_fields_set:
            _dict['OriginalLineVat'] = None

        # set to None if bundle_product_merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.bundle_product_merchant_product_no is None and "bundle_product_merchant_product_no" in self.model_fields_set:
            _dict['BundleProductMerchantProductNo'] = None

        # set to None if juris_code (nullable) is None
        # and model_fields_set contains the field
        if self.juris_code is None and "juris_code" in self.model_fields_set:
            _dict['JurisCode'] = None

        # set to None if juris_name (nullable) is None
        # and model_fields_set contains the field
        if self.juris_name is None and "juris_name" in self.model_fields_set:
            _dict['JurisName'] = None

        # set to None if unit_price_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price_excl_vat is None and "unit_price_excl_vat" in self.model_fields_set:
            _dict['UnitPriceExclVat'] = None

        # set to None if line_total_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.line_total_excl_vat is None and "line_total_excl_vat" in self.model_fields_set:
            _dict['LineTotalExclVat'] = None

        # set to None if original_unit_price_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_unit_price_excl_vat is None and "original_unit_price_excl_vat" in self.model_fields_set:
            _dict['OriginalUnitPriceExclVat'] = None

        # set to None if original_line_total_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.original_line_total_excl_vat is None and "original_line_total_excl_vat" in self.model_fields_set:
            _dict['OriginalLineTotalExclVat'] = None

        # set to None if extra_data (nullable) is None
        # and model_fields_set contains the field
        if self.extra_data is None and "extra_data" in self.model_fields_set:
            _dict['ExtraData'] = None

        # set to None if merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_product_no is None and "merchant_product_no" in self.model_fields_set:
            _dict['MerchantProductNo'] = None

        # set to None if expected_delivery_date (nullable) is None
        # and model_fields_set contains the field
        if self.expected_delivery_date is None and "expected_delivery_date" in self.model_fields_set:
            _dict['ExpectedDeliveryDate'] = None

        # set to None if latest_delivery_date (nullable) is None
        # and model_fields_set contains the field
        if self.latest_delivery_date is None and "latest_delivery_date" in self.model_fields_set:
            _dict['LatestDeliveryDate'] = None

        # set to None if expected_shipment_date (nullable) is None
        # and model_fields_set contains the field
        if self.expected_shipment_date is None and "expected_shipment_date" in self.model_fields_set:
            _dict['ExpectedShipmentDate'] = None

        # set to None if latest_shipment_date (nullable) is None
        # and model_fields_set contains the field
        if self.latest_shipment_date is None and "latest_shipment_date" in self.model_fields_set:
            _dict['LatestShipmentDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantOrderLineResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "ChannelOrderLineNo": obj.get("ChannelOrderLineNo"),
            "Status": obj.get("Status"),
            "IsFulfillmentByMarketplace": obj.get("IsFulfillmentByMarketplace"),
            "Gtin": obj.get("Gtin"),
            "Description": obj.get("Description"),
            "StockLocation": MerchantStockLocationResponse.from_dict(obj["StockLocation"]) if obj.get("StockLocation") is not None else None,
            "UnitVat": obj.get("UnitVat"),
            "LineTotalInclVat": obj.get("LineTotalInclVat"),
            "LineVat": obj.get("LineVat"),
            "OriginalUnitPriceInclVat": obj.get("OriginalUnitPriceInclVat"),
            "OriginalUnitVat": obj.get("OriginalUnitVat"),
            "OriginalLineTotalInclVat": obj.get("OriginalLineTotalInclVat"),
            "OriginalLineVat": obj.get("OriginalLineVat"),
            "OriginalFeeFixed": obj.get("OriginalFeeFixed"),
            "BundleProductMerchantProductNo": obj.get("BundleProductMerchantProductNo"),
            "JurisCode": obj.get("JurisCode"),
            "JurisName": obj.get("JurisName"),
            "VatRate": obj.get("VatRate"),
            "UnitPriceExclVat": obj.get("UnitPriceExclVat"),
            "LineTotalExclVat": obj.get("LineTotalExclVat"),
            "OriginalUnitPriceExclVat": obj.get("OriginalUnitPriceExclVat"),
            "OriginalLineTotalExclVat": obj.get("OriginalLineTotalExclVat"),
            "ExtraData": [MerchantOrderLineExtraDataResponse.from_dict(_item) for _item in obj["ExtraData"]] if obj.get("ExtraData") is not None else None,
            "ChannelProductNo": obj.get("ChannelProductNo"),
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "Quantity": obj.get("Quantity"),
            "CancellationRequestedQuantity": obj.get("CancellationRequestedQuantity"),
            "UnitPriceInclVat": obj.get("UnitPriceInclVat"),
            "FeeFixed": obj.get("FeeFixed"),
            "FeeRate": obj.get("FeeRate"),
            "Condition": obj.get("Condition"),
            "ExpectedDeliveryDate": obj.get("ExpectedDeliveryDate"),
            "LatestDeliveryDate": obj.get("LatestDeliveryDate"),
            "ExpectedShipmentDate": obj.get("ExpectedShipmentDate"),
            "LatestShipmentDate": obj.get("LatestShipmentDate")
        })
        return _obj


