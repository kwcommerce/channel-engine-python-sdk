# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MerchantProductWithBuyBoxPrice(BaseModel):
    """
    MerchantProductWithBuyBoxPrice
    """ # noqa: E501
    sku: Optional[StrictStr] = Field(default=None, description="Product SKU number", alias="Sku")
    gtin: Optional[StrictStr] = Field(default=None, description="Product GTIN", alias="Gtin")
    buy_box_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of Buy box winner (excl. shipping cost)  Note: not all channels have a separate shipping cost field (e.g. bol.com), so can be the same as BuyBoxPriceInclShipping", alias="BuyBoxPrice")
    buy_box_price_incl_shipping: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of Buy box winner (incl. shipping cost).  If null, then there is no data or no Buy box winner", alias="BuyBoxPriceInclShipping")
    is_merchant_buy_box_winner: Optional[StrictBool] = Field(default=None, description="Are you the Buy box winner or not?", alias="IsMerchantBuyBoxWinner")
    __properties: ClassVar[List[str]] = ["Sku", "Gtin", "BuyBoxPrice", "BuyBoxPriceInclShipping", "IsMerchantBuyBoxWinner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantProductWithBuyBoxPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if sku (nullable) is None
        # and model_fields_set contains the field
        if self.sku is None and "sku" in self.model_fields_set:
            _dict['Sku'] = None

        # set to None if gtin (nullable) is None
        # and model_fields_set contains the field
        if self.gtin is None and "gtin" in self.model_fields_set:
            _dict['Gtin'] = None

        # set to None if buy_box_price (nullable) is None
        # and model_fields_set contains the field
        if self.buy_box_price is None and "buy_box_price" in self.model_fields_set:
            _dict['BuyBoxPrice'] = None

        # set to None if buy_box_price_incl_shipping (nullable) is None
        # and model_fields_set contains the field
        if self.buy_box_price_incl_shipping is None and "buy_box_price_incl_shipping" in self.model_fields_set:
            _dict['BuyBoxPriceInclShipping'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantProductWithBuyBoxPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Sku": obj.get("Sku"),
            "Gtin": obj.get("Gtin"),
            "BuyBoxPrice": obj.get("BuyBoxPrice"),
            "BuyBoxPriceInclShipping": obj.get("BuyBoxPriceInclShipping"),
            "IsMerchantBuyBoxWinner": obj.get("IsMerchantBuyBoxWinner")
        })
        return _obj


