# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.purchase_order_invoice_allowance_details import PurchaseOrderInvoiceAllowanceDetails
from openapi_client.models.purchase_order_invoice_charge_details import PurchaseOrderInvoiceChargeDetails
from openapi_client.models.purchase_order_invoice_tax_details import PurchaseOrderInvoiceTaxDetails
from typing import Optional, Set
from typing_extensions import Self

class MerchantPurchaseOrderInvoiceLine(BaseModel):
    """
    MerchantPurchaseOrderInvoiceLine
    """ # noqa: E501
    channel_purchase_order_no: Optional[StrictStr] = Field(default=None, alias="ChannelPurchaseOrderNo")
    merchant_purchase_order_no: Optional[StrictStr] = Field(default=None, alias="MerchantPurchaseOrderNo")
    channel_product_no: Optional[StrictStr] = Field(default=None, alias="ChannelProductNo")
    merchant_product_no: Optional[StrictStr] = Field(default=None, alias="MerchantProductNo")
    quantity: Optional[StrictInt] = Field(default=None, alias="Quantity")
    net_cost_currency_code: Optional[StrictStr] = Field(default=None, alias="NetCostCurrencyCode")
    net_cost_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="NetCostAmount")
    hsn_code: Optional[StrictStr] = Field(default=None, alias="HsnCode")
    cn_reference_invoice_number: Optional[StrictStr] = Field(default=None, alias="CnReferenceInvoiceNumber")
    cn_debit_note_number: Optional[StrictStr] = Field(default=None, alias="CnDebitNoteNumber")
    cn_returns_reference_number: Optional[StrictStr] = Field(default=None, alias="CnReturnsReferenceNumber")
    cn_rma_id: Optional[StrictStr] = Field(default=None, alias="CnRmaId")
    cn_goods_return_date: Optional[datetime] = Field(default=None, alias="CnGoodsReturnDate")
    cn_coop_reference_number: Optional[StrictStr] = Field(default=None, alias="CnCoopReferenceNumber")
    cn_consignors_reference_number: Optional[StrictStr] = Field(default=None, alias="CnConsignorsReferenceNumber")
    allowance_details: Optional[List[PurchaseOrderInvoiceAllowanceDetails]] = Field(default=None, alias="AllowanceDetails")
    tax_details: Optional[List[PurchaseOrderInvoiceTaxDetails]] = Field(default=None, alias="TaxDetails")
    charge_details: Optional[List[PurchaseOrderInvoiceChargeDetails]] = Field(default=None, alias="ChargeDetails")
    __properties: ClassVar[List[str]] = ["ChannelPurchaseOrderNo", "MerchantPurchaseOrderNo", "ChannelProductNo", "MerchantProductNo", "Quantity", "NetCostCurrencyCode", "NetCostAmount", "HsnCode", "CnReferenceInvoiceNumber", "CnDebitNoteNumber", "CnReturnsReferenceNumber", "CnRmaId", "CnGoodsReturnDate", "CnCoopReferenceNumber", "CnConsignorsReferenceNumber", "AllowanceDetails", "TaxDetails", "ChargeDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantPurchaseOrderInvoiceLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowance_details (list)
        _items = []
        if self.allowance_details:
            for _item in self.allowance_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AllowanceDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_details (list)
        _items = []
        if self.tax_details:
            for _item in self.tax_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TaxDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in charge_details (list)
        _items = []
        if self.charge_details:
            for _item in self.charge_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ChargeDetails'] = _items
        # set to None if channel_purchase_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_purchase_order_no is None and "channel_purchase_order_no" in self.model_fields_set:
            _dict['ChannelPurchaseOrderNo'] = None

        # set to None if merchant_purchase_order_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_purchase_order_no is None and "merchant_purchase_order_no" in self.model_fields_set:
            _dict['MerchantPurchaseOrderNo'] = None

        # set to None if channel_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_product_no is None and "channel_product_no" in self.model_fields_set:
            _dict['ChannelProductNo'] = None

        # set to None if merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_product_no is None and "merchant_product_no" in self.model_fields_set:
            _dict['MerchantProductNo'] = None

        # set to None if net_cost_currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.net_cost_currency_code is None and "net_cost_currency_code" in self.model_fields_set:
            _dict['NetCostCurrencyCode'] = None

        # set to None if hsn_code (nullable) is None
        # and model_fields_set contains the field
        if self.hsn_code is None and "hsn_code" in self.model_fields_set:
            _dict['HsnCode'] = None

        # set to None if cn_reference_invoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.cn_reference_invoice_number is None and "cn_reference_invoice_number" in self.model_fields_set:
            _dict['CnReferenceInvoiceNumber'] = None

        # set to None if cn_debit_note_number (nullable) is None
        # and model_fields_set contains the field
        if self.cn_debit_note_number is None and "cn_debit_note_number" in self.model_fields_set:
            _dict['CnDebitNoteNumber'] = None

        # set to None if cn_returns_reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.cn_returns_reference_number is None and "cn_returns_reference_number" in self.model_fields_set:
            _dict['CnReturnsReferenceNumber'] = None

        # set to None if cn_rma_id (nullable) is None
        # and model_fields_set contains the field
        if self.cn_rma_id is None and "cn_rma_id" in self.model_fields_set:
            _dict['CnRmaId'] = None

        # set to None if cn_coop_reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.cn_coop_reference_number is None and "cn_coop_reference_number" in self.model_fields_set:
            _dict['CnCoopReferenceNumber'] = None

        # set to None if cn_consignors_reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.cn_consignors_reference_number is None and "cn_consignors_reference_number" in self.model_fields_set:
            _dict['CnConsignorsReferenceNumber'] = None

        # set to None if allowance_details (nullable) is None
        # and model_fields_set contains the field
        if self.allowance_details is None and "allowance_details" in self.model_fields_set:
            _dict['AllowanceDetails'] = None

        # set to None if tax_details (nullable) is None
        # and model_fields_set contains the field
        if self.tax_details is None and "tax_details" in self.model_fields_set:
            _dict['TaxDetails'] = None

        # set to None if charge_details (nullable) is None
        # and model_fields_set contains the field
        if self.charge_details is None and "charge_details" in self.model_fields_set:
            _dict['ChargeDetails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantPurchaseOrderInvoiceLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChannelPurchaseOrderNo": obj.get("ChannelPurchaseOrderNo"),
            "MerchantPurchaseOrderNo": obj.get("MerchantPurchaseOrderNo"),
            "ChannelProductNo": obj.get("ChannelProductNo"),
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "Quantity": obj.get("Quantity"),
            "NetCostCurrencyCode": obj.get("NetCostCurrencyCode"),
            "NetCostAmount": obj.get("NetCostAmount"),
            "HsnCode": obj.get("HsnCode"),
            "CnReferenceInvoiceNumber": obj.get("CnReferenceInvoiceNumber"),
            "CnDebitNoteNumber": obj.get("CnDebitNoteNumber"),
            "CnReturnsReferenceNumber": obj.get("CnReturnsReferenceNumber"),
            "CnRmaId": obj.get("CnRmaId"),
            "CnGoodsReturnDate": obj.get("CnGoodsReturnDate"),
            "CnCoopReferenceNumber": obj.get("CnCoopReferenceNumber"),
            "CnConsignorsReferenceNumber": obj.get("CnConsignorsReferenceNumber"),
            "AllowanceDetails": [PurchaseOrderInvoiceAllowanceDetails.from_dict(_item) for _item in obj["AllowanceDetails"]] if obj.get("AllowanceDetails") is not None else None,
            "TaxDetails": [PurchaseOrderInvoiceTaxDetails.from_dict(_item) for _item in obj["TaxDetails"]] if obj.get("TaxDetails") is not None else None,
            "ChargeDetails": [PurchaseOrderInvoiceChargeDetails.from_dict(_item) for _item in obj["ChargeDetails"]] if obj.get("ChargeDetails") is not None else None
        })
        return _obj


