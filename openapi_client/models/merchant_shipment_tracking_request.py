# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MerchantShipmentTrackingRequest(BaseModel):
    """
    MerchantShipmentTrackingRequest
    """ # noqa: E501
    method: Annotated[str, Field(min_length=0, strict=True, max_length=50)] = Field(description="Shipment method (carrier).", alias="Method")
    track_trace_no: Annotated[str, Field(min_length=0, strict=True, max_length=50)] = Field(description="The unique shipping reference used by the Shipping carrier (track & trace number).", alias="TrackTraceNo")
    return_track_trace_no: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.", alias="ReturnTrackTraceNo")
    track_trace_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=250)]] = Field(default=None, description="A link to a page of the carrier where the customer can track the shipping of her package.", alias="TrackTraceUrl")
    shipped_from_country_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=3)]] = Field(default=None, description="The code of the country from where the package is being shipped.", alias="ShippedFromCountryCode")
    __properties: ClassVar[List[str]] = ["Method", "TrackTraceNo", "ReturnTrackTraceNo", "TrackTraceUrl", "ShippedFromCountryCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantShipmentTrackingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if return_track_trace_no (nullable) is None
        # and model_fields_set contains the field
        if self.return_track_trace_no is None and "return_track_trace_no" in self.model_fields_set:
            _dict['ReturnTrackTraceNo'] = None

        # set to None if track_trace_url (nullable) is None
        # and model_fields_set contains the field
        if self.track_trace_url is None and "track_trace_url" in self.model_fields_set:
            _dict['TrackTraceUrl'] = None

        # set to None if shipped_from_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.shipped_from_country_code is None and "shipped_from_country_code" in self.model_fields_set:
            _dict['ShippedFromCountryCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantShipmentTrackingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Method": obj.get("Method"),
            "TrackTraceNo": obj.get("TrackTraceNo"),
            "ReturnTrackTraceNo": obj.get("ReturnTrackTraceNo"),
            "TrackTraceUrl": obj.get("TrackTraceUrl"),
            "ShippedFromCountryCode": obj.get("ShippedFromCountryCode")
        })
        return _obj


