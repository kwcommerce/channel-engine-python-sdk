# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.i_purchase_order_shipment_line_by_filter import IPurchaseOrderShipmentLineByFilter
from openapi_client.models.purchase_order_related_item_export_status import PurchaseOrderRelatedItemExportStatus
from openapi_client.models.shipment_type import ShipmentType
from openapi_client.models.volume_unit_of_measure import VolumeUnitOfMeasure
from openapi_client.models.weight_unit_of_measure import WeightUnitOfMeasure
from typing import Optional, Set
from typing_extensions import Self

class IPurchaseOrderShipmentByFilter(BaseModel):
    """
    IPurchaseOrderShipmentByFilter
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ChannelEngine identifier of the shipment", alias="Id")
    merchant_shipment_no: Optional[StrictStr] = Field(default=None, description="The number the merchant uses to id this PO shipment", alias="MerchantShipmentNo")
    channel_shipment_no: Optional[StrictStr] = Field(default=None, description="The number the channel uses to id this PO shipment", alias="ChannelShipmentNo")
    shipment_type: Optional[ShipmentType] = Field(default=None, alias="ShipmentType")
    shipped_date: Optional[datetime] = Field(default=None, description="When the shipment was shipped", alias="ShippedDate")
    estimated_delivery_date: Optional[datetime] = Field(default=None, description="Estimated delivery time in the channel's warehouse", alias="EstimatedDeliveryDate")
    carrier_name: Optional[StrictStr] = Field(default=None, description="Name of the carrier", alias="CarrierName")
    carrier_shipment_no: Optional[StrictStr] = Field(default=None, description="The number the carrier uses to id this PO shipment", alias="CarrierShipmentNo")
    bill_of_lading_number: Optional[StrictStr] = Field(default=None, description="Bill of Lading number (not unique for a shipment)", alias="BillOfLadingNumber")
    shipment_weight_unit_of_measure: Optional[WeightUnitOfMeasure] = Field(default=None, alias="ShipmentWeightUnitOfMeasure")
    shipment_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The shipment's weight", alias="ShipmentWeight")
    shipment_volume_unit_of_measure: Optional[VolumeUnitOfMeasure] = Field(default=None, alias="ShipmentVolumeUnitOfMeasure")
    shipment_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The shipment's volume", alias="ShipmentVolume")
    last_merchant_updated_at: Optional[datetime] = Field(default=None, description="The last time the shipment was updated by the merchant", alias="LastMerchantUpdatedAt")
    last_exported_at: Optional[datetime] = Field(default=None, description="The last time the shipment was exported to the channel", alias="LastExportedAt")
    last_export_status: Optional[PurchaseOrderRelatedItemExportStatus] = Field(default=None, alias="LastExportStatus")
    lines: Optional[List[IPurchaseOrderShipmentLineByFilter]] = Field(default=None, description="The products in this PO shipment", alias="Lines")
    __properties: ClassVar[List[str]] = ["Id", "MerchantShipmentNo", "ChannelShipmentNo", "ShipmentType", "ShippedDate", "EstimatedDeliveryDate", "CarrierName", "CarrierShipmentNo", "BillOfLadingNumber", "ShipmentWeightUnitOfMeasure", "ShipmentWeight", "ShipmentVolumeUnitOfMeasure", "ShipmentVolume", "LastMerchantUpdatedAt", "LastExportedAt", "LastExportStatus", "Lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPurchaseOrderShipmentByFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Lines'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if merchant_shipment_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_shipment_no is None and "merchant_shipment_no" in self.model_fields_set:
            _dict['MerchantShipmentNo'] = None

        # set to None if channel_shipment_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_shipment_no is None and "channel_shipment_no" in self.model_fields_set:
            _dict['ChannelShipmentNo'] = None

        # set to None if carrier_name (nullable) is None
        # and model_fields_set contains the field
        if self.carrier_name is None and "carrier_name" in self.model_fields_set:
            _dict['CarrierName'] = None

        # set to None if carrier_shipment_no (nullable) is None
        # and model_fields_set contains the field
        if self.carrier_shipment_no is None and "carrier_shipment_no" in self.model_fields_set:
            _dict['CarrierShipmentNo'] = None

        # set to None if bill_of_lading_number (nullable) is None
        # and model_fields_set contains the field
        if self.bill_of_lading_number is None and "bill_of_lading_number" in self.model_fields_set:
            _dict['BillOfLadingNumber'] = None

        # set to None if shipment_weight (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_weight is None and "shipment_weight" in self.model_fields_set:
            _dict['ShipmentWeight'] = None

        # set to None if shipment_volume (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_volume is None and "shipment_volume" in self.model_fields_set:
            _dict['ShipmentVolume'] = None

        # set to None if last_exported_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_exported_at is None and "last_exported_at" in self.model_fields_set:
            _dict['LastExportedAt'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['Lines'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPurchaseOrderShipmentByFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "MerchantShipmentNo": obj.get("MerchantShipmentNo"),
            "ChannelShipmentNo": obj.get("ChannelShipmentNo"),
            "ShipmentType": obj.get("ShipmentType"),
            "ShippedDate": obj.get("ShippedDate"),
            "EstimatedDeliveryDate": obj.get("EstimatedDeliveryDate"),
            "CarrierName": obj.get("CarrierName"),
            "CarrierShipmentNo": obj.get("CarrierShipmentNo"),
            "BillOfLadingNumber": obj.get("BillOfLadingNumber"),
            "ShipmentWeightUnitOfMeasure": obj.get("ShipmentWeightUnitOfMeasure"),
            "ShipmentWeight": obj.get("ShipmentWeight"),
            "ShipmentVolumeUnitOfMeasure": obj.get("ShipmentVolumeUnitOfMeasure"),
            "ShipmentVolume": obj.get("ShipmentVolume"),
            "LastMerchantUpdatedAt": obj.get("LastMerchantUpdatedAt"),
            "LastExportedAt": obj.get("LastExportedAt"),
            "LastExportStatus": obj.get("LastExportStatus"),
            "Lines": [IPurchaseOrderShipmentLineByFilter.from_dict(_item) for _item in obj["Lines"]] if obj.get("Lines") is not None else None
        })
        return _obj


