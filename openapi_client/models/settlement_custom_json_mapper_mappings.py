# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.settlement_custom_json_mapper_mapping import SettlementCustomJsonMapperMapping
from typing import Optional, Set
from typing_extensions import Self

class SettlementCustomJsonMapperMappings(BaseModel):
    """
    SettlementCustomJsonMapperMappings
    """ # noqa: E501
    settlement_id: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="settlementId")
    channel_settlement_no: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="channelSettlementNo")
    channel_id: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="channelId")
    channel_order_no: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="channelOrderNo")
    order_id: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="orderId")
    merchant_order_no: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="merchantOrderNo")
    total_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="totalAmount")
    currency_code: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="currencyCode")
    order_proceeds_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="orderProceedsAmount")
    commission_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="commissionAmount")
    withheld_vat_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="withheldVatAmount")
    fee_correction_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="feeCorrectionAmount")
    marketplace_fulfillment_fee_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="marketplaceFulfillmentFeeAmount")
    marketplace_inventory_fee_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="marketplaceInventoryFeeAmount")
    subscription_fee_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="subscriptionFeeAmount")
    additional_channel_costs_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="additionalChannelCostsAmount")
    channel_reference: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="channelReference")
    total_fee_amount: Optional[SettlementCustomJsonMapperMapping] = Field(default=None, alias="totalFeeAmount")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["settlementId", "channelSettlementNo", "channelId", "channelOrderNo", "orderId", "merchantOrderNo", "totalAmount", "currencyCode", "orderProceedsAmount", "commissionAmount", "withheldVatAmount", "feeCorrectionAmount", "marketplaceFulfillmentFeeAmount", "marketplaceInventoryFeeAmount", "subscriptionFeeAmount", "additionalChannelCostsAmount", "channelReference", "totalFeeAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SettlementCustomJsonMapperMappings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of settlement_id
        if self.settlement_id:
            _dict['settlementId'] = self.settlement_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_settlement_no
        if self.channel_settlement_no:
            _dict['channelSettlementNo'] = self.channel_settlement_no.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_id
        if self.channel_id:
            _dict['channelId'] = self.channel_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_order_no
        if self.channel_order_no:
            _dict['channelOrderNo'] = self.channel_order_no.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_id
        if self.order_id:
            _dict['orderId'] = self.order_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_order_no
        if self.merchant_order_no:
            _dict['merchantOrderNo'] = self.merchant_order_no.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['totalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_code
        if self.currency_code:
            _dict['currencyCode'] = self.currency_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_proceeds_amount
        if self.order_proceeds_amount:
            _dict['orderProceedsAmount'] = self.order_proceeds_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commission_amount
        if self.commission_amount:
            _dict['commissionAmount'] = self.commission_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of withheld_vat_amount
        if self.withheld_vat_amount:
            _dict['withheldVatAmount'] = self.withheld_vat_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee_correction_amount
        if self.fee_correction_amount:
            _dict['feeCorrectionAmount'] = self.fee_correction_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketplace_fulfillment_fee_amount
        if self.marketplace_fulfillment_fee_amount:
            _dict['marketplaceFulfillmentFeeAmount'] = self.marketplace_fulfillment_fee_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketplace_inventory_fee_amount
        if self.marketplace_inventory_fee_amount:
            _dict['marketplaceInventoryFeeAmount'] = self.marketplace_inventory_fee_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_fee_amount
        if self.subscription_fee_amount:
            _dict['subscriptionFeeAmount'] = self.subscription_fee_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_channel_costs_amount
        if self.additional_channel_costs_amount:
            _dict['additionalChannelCostsAmount'] = self.additional_channel_costs_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_reference
        if self.channel_reference:
            _dict['channelReference'] = self.channel_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fee_amount
        if self.total_fee_amount:
            _dict['totalFeeAmount'] = self.total_fee_amount.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SettlementCustomJsonMapperMappings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "settlementId": SettlementCustomJsonMapperMapping.from_dict(obj["settlementId"]) if obj.get("settlementId") is not None else None,
            "channelSettlementNo": SettlementCustomJsonMapperMapping.from_dict(obj["channelSettlementNo"]) if obj.get("channelSettlementNo") is not None else None,
            "channelId": SettlementCustomJsonMapperMapping.from_dict(obj["channelId"]) if obj.get("channelId") is not None else None,
            "channelOrderNo": SettlementCustomJsonMapperMapping.from_dict(obj["channelOrderNo"]) if obj.get("channelOrderNo") is not None else None,
            "orderId": SettlementCustomJsonMapperMapping.from_dict(obj["orderId"]) if obj.get("orderId") is not None else None,
            "merchantOrderNo": SettlementCustomJsonMapperMapping.from_dict(obj["merchantOrderNo"]) if obj.get("merchantOrderNo") is not None else None,
            "totalAmount": SettlementCustomJsonMapperMapping.from_dict(obj["totalAmount"]) if obj.get("totalAmount") is not None else None,
            "currencyCode": SettlementCustomJsonMapperMapping.from_dict(obj["currencyCode"]) if obj.get("currencyCode") is not None else None,
            "orderProceedsAmount": SettlementCustomJsonMapperMapping.from_dict(obj["orderProceedsAmount"]) if obj.get("orderProceedsAmount") is not None else None,
            "commissionAmount": SettlementCustomJsonMapperMapping.from_dict(obj["commissionAmount"]) if obj.get("commissionAmount") is not None else None,
            "withheldVatAmount": SettlementCustomJsonMapperMapping.from_dict(obj["withheldVatAmount"]) if obj.get("withheldVatAmount") is not None else None,
            "feeCorrectionAmount": SettlementCustomJsonMapperMapping.from_dict(obj["feeCorrectionAmount"]) if obj.get("feeCorrectionAmount") is not None else None,
            "marketplaceFulfillmentFeeAmount": SettlementCustomJsonMapperMapping.from_dict(obj["marketplaceFulfillmentFeeAmount"]) if obj.get("marketplaceFulfillmentFeeAmount") is not None else None,
            "marketplaceInventoryFeeAmount": SettlementCustomJsonMapperMapping.from_dict(obj["marketplaceInventoryFeeAmount"]) if obj.get("marketplaceInventoryFeeAmount") is not None else None,
            "subscriptionFeeAmount": SettlementCustomJsonMapperMapping.from_dict(obj["subscriptionFeeAmount"]) if obj.get("subscriptionFeeAmount") is not None else None,
            "additionalChannelCostsAmount": SettlementCustomJsonMapperMapping.from_dict(obj["additionalChannelCostsAmount"]) if obj.get("additionalChannelCostsAmount") is not None else None,
            "channelReference": SettlementCustomJsonMapperMapping.from_dict(obj["channelReference"]) if obj.get("channelReference") is not None else None,
            "totalFeeAmount": SettlementCustomJsonMapperMapping.from_dict(obj["totalFeeAmount"]) if obj.get("totalFeeAmount") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


