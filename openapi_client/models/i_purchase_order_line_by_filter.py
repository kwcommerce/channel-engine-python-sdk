# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.purchase_order_line_unit_of_measure import PurchaseOrderLineUnitOfMeasure
from typing import Optional, Set
from typing_extensions import Self

class IPurchaseOrderLineByFilter(BaseModel):
    """
    IPurchaseOrderLineByFilter
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, alias="Id")
    channel_order_line_no: Optional[StrictStr] = Field(default=None, alias="ChannelOrderLineNo")
    channel_product_no: Optional[StrictStr] = Field(default=None, alias="ChannelProductNo")
    merchant_product_no: Optional[StrictStr] = Field(default=None, alias="MerchantProductNo")
    quantity: Optional[StrictInt] = Field(default=None, alias="Quantity")
    is_back_order_allowed: Optional[StrictBool] = Field(default=None, alias="IsBackOrderAllowed")
    unit_of_measure: Optional[PurchaseOrderLineUnitOfMeasure] = Field(default=None, alias="UnitOfMeasure")
    unit_size: Optional[StrictInt] = Field(default=None, alias="UnitSize")
    net_cost_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="NetCostAmount")
    net_cost_currency: Optional[StrictStr] = Field(default=None, alias="NetCostCurrency")
    list_price_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ListPriceAmount")
    created_at: Optional[datetime] = Field(default=None, alias="CreatedAt")
    updated_at: Optional[datetime] = Field(default=None, alias="UpdatedAt")
    acknowledged_date: Optional[datetime] = Field(default=None, alias="AcknowledgedDate")
    line_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="LineTotal")
    __properties: ClassVar[List[str]] = ["Id", "ChannelOrderLineNo", "ChannelProductNo", "MerchantProductNo", "Quantity", "IsBackOrderAllowed", "UnitOfMeasure", "UnitSize", "NetCostAmount", "NetCostCurrency", "ListPriceAmount", "CreatedAt", "UpdatedAt", "AcknowledgedDate", "LineTotal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPurchaseOrderLineByFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['Id'] = None

        # set to None if channel_order_line_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_order_line_no is None and "channel_order_line_no" in self.model_fields_set:
            _dict['ChannelOrderLineNo'] = None

        # set to None if channel_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.channel_product_no is None and "channel_product_no" in self.model_fields_set:
            _dict['ChannelProductNo'] = None

        # set to None if merchant_product_no (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_product_no is None and "merchant_product_no" in self.model_fields_set:
            _dict['MerchantProductNo'] = None

        # set to None if unit_size (nullable) is None
        # and model_fields_set contains the field
        if self.unit_size is None and "unit_size" in self.model_fields_set:
            _dict['UnitSize'] = None

        # set to None if net_cost_amount (nullable) is None
        # and model_fields_set contains the field
        if self.net_cost_amount is None and "net_cost_amount" in self.model_fields_set:
            _dict['NetCostAmount'] = None

        # set to None if net_cost_currency (nullable) is None
        # and model_fields_set contains the field
        if self.net_cost_currency is None and "net_cost_currency" in self.model_fields_set:
            _dict['NetCostCurrency'] = None

        # set to None if list_price_amount (nullable) is None
        # and model_fields_set contains the field
        if self.list_price_amount is None and "list_price_amount" in self.model_fields_set:
            _dict['ListPriceAmount'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['UpdatedAt'] = None

        # set to None if acknowledged_date (nullable) is None
        # and model_fields_set contains the field
        if self.acknowledged_date is None and "acknowledged_date" in self.model_fields_set:
            _dict['AcknowledgedDate'] = None

        # set to None if line_total (nullable) is None
        # and model_fields_set contains the field
        if self.line_total is None and "line_total" in self.model_fields_set:
            _dict['LineTotal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPurchaseOrderLineByFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "ChannelOrderLineNo": obj.get("ChannelOrderLineNo"),
            "ChannelProductNo": obj.get("ChannelProductNo"),
            "MerchantProductNo": obj.get("MerchantProductNo"),
            "Quantity": obj.get("Quantity"),
            "IsBackOrderAllowed": obj.get("IsBackOrderAllowed"),
            "UnitOfMeasure": obj.get("UnitOfMeasure"),
            "UnitSize": obj.get("UnitSize"),
            "NetCostAmount": obj.get("NetCostAmount"),
            "NetCostCurrency": obj.get("NetCostCurrency"),
            "ListPriceAmount": obj.get("ListPriceAmount"),
            "CreatedAt": obj.get("CreatedAt"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "AcknowledgedDate": obj.get("AcknowledgedDate"),
            "LineTotal": obj.get("LineTotal")
        })
        return _obj


