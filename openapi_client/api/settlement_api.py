# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.api_response import ApiResponse
from openapi_client.models.collection_of_merchant_settlement_reports_response import CollectionOfMerchantSettlementReportsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SettlementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def settlement_get_by_filter(
        self,
        un_exported_only: Annotated[Optional[StrictBool], Field(description="Filter on settlements that have not been exported before.")] = None,
        settlement_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on settlement IDs.")] = None,
        channel_settlement_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on channel settlement nos.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on channel id list.")] = None,
        from_start_date: Annotated[Optional[datetime], Field(description="Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        to_start_date: Annotated[Optional[datetime], Field(description="Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_end_date: Annotated[Optional[datetime], Field(description="Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.")] = None,
        to_end_date: Annotated[Optional[datetime], Field(description="Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_create_date: Annotated[Optional[datetime], Field(description="Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        to_create_date: Annotated[Optional[datetime], Field(description="Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_update_date: Annotated[Optional[datetime], Field(description="Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.")] = None,
        to_update_date: Annotated[Optional[datetime], Field(description="Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantSettlementReportsResponse:
        """Gets settlements

        Gets the settlements based on the available filters.

        :param un_exported_only: Filter on settlements that have not been exported before.
        :type un_exported_only: bool
        :param settlement_ids: Filter on settlement IDs.
        :type settlement_ids: List[int]
        :param channel_settlement_nos: Filter on channel settlement nos.
        :type channel_settlement_nos: List[str]
        :param channel_ids: Filter on channel id list.
        :type channel_ids: List[int]
        :param from_start_date: Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type from_start_date: datetime
        :param to_start_date: Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_start_date: datetime
        :param from_end_date: Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
        :type from_end_date: datetime
        :param to_end_date: Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_end_date: datetime
        :param from_create_date: Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type from_create_date: datetime
        :param to_create_date: Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_create_date: datetime
        :param from_update_date: Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
        :type from_update_date: datetime
        :param to_update_date: Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_update_date: datetime
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._settlement_get_by_filter_serialize(
            un_exported_only=un_exported_only,
            settlement_ids=settlement_ids,
            channel_settlement_nos=channel_settlement_nos,
            channel_ids=channel_ids,
            from_start_date=from_start_date,
            to_start_date=to_start_date,
            from_end_date=from_end_date,
            to_end_date=to_end_date,
            from_create_date=from_create_date,
            to_create_date=to_create_date,
            from_update_date=from_update_date,
            to_update_date=to_update_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantSettlementReportsResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def settlement_get_by_filter_with_http_info(
        self,
        un_exported_only: Annotated[Optional[StrictBool], Field(description="Filter on settlements that have not been exported before.")] = None,
        settlement_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on settlement IDs.")] = None,
        channel_settlement_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on channel settlement nos.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on channel id list.")] = None,
        from_start_date: Annotated[Optional[datetime], Field(description="Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        to_start_date: Annotated[Optional[datetime], Field(description="Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_end_date: Annotated[Optional[datetime], Field(description="Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.")] = None,
        to_end_date: Annotated[Optional[datetime], Field(description="Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_create_date: Annotated[Optional[datetime], Field(description="Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        to_create_date: Annotated[Optional[datetime], Field(description="Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_update_date: Annotated[Optional[datetime], Field(description="Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.")] = None,
        to_update_date: Annotated[Optional[datetime], Field(description="Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantSettlementReportsResponse]:
        """Gets settlements

        Gets the settlements based on the available filters.

        :param un_exported_only: Filter on settlements that have not been exported before.
        :type un_exported_only: bool
        :param settlement_ids: Filter on settlement IDs.
        :type settlement_ids: List[int]
        :param channel_settlement_nos: Filter on channel settlement nos.
        :type channel_settlement_nos: List[str]
        :param channel_ids: Filter on channel id list.
        :type channel_ids: List[int]
        :param from_start_date: Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type from_start_date: datetime
        :param to_start_date: Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_start_date: datetime
        :param from_end_date: Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
        :type from_end_date: datetime
        :param to_end_date: Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_end_date: datetime
        :param from_create_date: Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type from_create_date: datetime
        :param to_create_date: Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_create_date: datetime
        :param from_update_date: Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
        :type from_update_date: datetime
        :param to_update_date: Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_update_date: datetime
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._settlement_get_by_filter_serialize(
            un_exported_only=un_exported_only,
            settlement_ids=settlement_ids,
            channel_settlement_nos=channel_settlement_nos,
            channel_ids=channel_ids,
            from_start_date=from_start_date,
            to_start_date=to_start_date,
            from_end_date=from_end_date,
            to_end_date=to_end_date,
            from_create_date=from_create_date,
            to_create_date=to_create_date,
            from_update_date=from_update_date,
            to_update_date=to_update_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantSettlementReportsResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def settlement_get_by_filter_without_preload_content(
        self,
        un_exported_only: Annotated[Optional[StrictBool], Field(description="Filter on settlements that have not been exported before.")] = None,
        settlement_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on settlement IDs.")] = None,
        channel_settlement_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on channel settlement nos.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on channel id list.")] = None,
        from_start_date: Annotated[Optional[datetime], Field(description="Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        to_start_date: Annotated[Optional[datetime], Field(description="Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_end_date: Annotated[Optional[datetime], Field(description="Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.")] = None,
        to_end_date: Annotated[Optional[datetime], Field(description="Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_create_date: Annotated[Optional[datetime], Field(description="Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        to_create_date: Annotated[Optional[datetime], Field(description="Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        from_update_date: Annotated[Optional[datetime], Field(description="Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.")] = None,
        to_update_date: Annotated[Optional[datetime], Field(description="Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets settlements

        Gets the settlements based on the available filters.

        :param un_exported_only: Filter on settlements that have not been exported before.
        :type un_exported_only: bool
        :param settlement_ids: Filter on settlement IDs.
        :type settlement_ids: List[int]
        :param channel_settlement_nos: Filter on channel settlement nos.
        :type channel_settlement_nos: List[str]
        :param channel_ids: Filter on channel id list.
        :type channel_ids: List[int]
        :param from_start_date: Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type from_start_date: datetime
        :param to_start_date: Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_start_date: datetime
        :param from_end_date: Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
        :type from_end_date: datetime
        :param to_end_date: Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_end_date: datetime
        :param from_create_date: Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type from_create_date: datetime
        :param to_create_date: Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_create_date: datetime
        :param from_update_date: Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
        :type from_update_date: datetime
        :param to_update_date: Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.
        :type to_update_date: datetime
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._settlement_get_by_filter_serialize(
            un_exported_only=un_exported_only,
            settlement_ids=settlement_ids,
            channel_settlement_nos=channel_settlement_nos,
            channel_ids=channel_ids,
            from_start_date=from_start_date,
            to_start_date=to_start_date,
            from_end_date=from_end_date,
            to_end_date=to_end_date,
            from_create_date=from_create_date,
            to_create_date=to_create_date,
            from_update_date=from_update_date,
            to_update_date=to_update_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantSettlementReportsResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _settlement_get_by_filter_serialize(
        self,
        un_exported_only,
        settlement_ids,
        channel_settlement_nos,
        channel_ids,
        from_start_date,
        to_start_date,
        from_end_date,
        to_end_date,
        from_create_date,
        to_create_date,
        from_update_date,
        to_update_date,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'settlementIds': 'multi',
            'channelSettlementNos': 'multi',
            'channelIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if un_exported_only is not None:
            
            _query_params.append(('unExportedOnly', un_exported_only))
            
        if settlement_ids is not None:
            
            _query_params.append(('settlementIds', settlement_ids))
            
        if channel_settlement_nos is not None:
            
            _query_params.append(('channelSettlementNos', channel_settlement_nos))
            
        if channel_ids is not None:
            
            _query_params.append(('channelIds', channel_ids))
            
        if from_start_date is not None:
            if isinstance(from_start_date, datetime):
                _query_params.append(
                    (
                        'fromStartDate',
                        from_start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromStartDate', from_start_date))
            
        if to_start_date is not None:
            if isinstance(to_start_date, datetime):
                _query_params.append(
                    (
                        'toStartDate',
                        to_start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toStartDate', to_start_date))
            
        if from_end_date is not None:
            if isinstance(from_end_date, datetime):
                _query_params.append(
                    (
                        'fromEndDate',
                        from_end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromEndDate', from_end_date))
            
        if to_end_date is not None:
            if isinstance(to_end_date, datetime):
                _query_params.append(
                    (
                        'toEndDate',
                        to_end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toEndDate', to_end_date))
            
        if from_create_date is not None:
            if isinstance(from_create_date, datetime):
                _query_params.append(
                    (
                        'fromCreateDate',
                        from_create_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromCreateDate', from_create_date))
            
        if to_create_date is not None:
            if isinstance(to_create_date, datetime):
                _query_params.append(
                    (
                        'toCreateDate',
                        to_create_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toCreateDate', to_create_date))
            
        if from_update_date is not None:
            if isinstance(from_update_date, datetime):
                _query_params.append(
                    (
                        'fromUpdateDate',
                        from_update_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromUpdateDate', from_update_date))
            
        if to_update_date is not None:
            if isinstance(to_update_date, datetime):
                _query_params.append(
                    (
                        'toUpdateDate',
                        to_update_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toUpdateDate', to_update_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settlements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settlement_upload_settlement(
        self,
        settlement: Annotated[Union[StrictBytes, StrictStr], Field(description="Settlement file up to 1 MB with additional data.  Format should be the one that the channel expects.")],
        channel_id: Annotated[Optional[StrictInt], Field(description="The channel ID for which the settlement is for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Imports a settlement file.

        Imports a settlement file.

        :param settlement: Settlement file up to 1 MB with additional data.  Format should be the one that the channel expects. (required)
        :type settlement: bytearray
        :param channel_id: The channel ID for which the settlement is for.
        :type channel_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._settlement_upload_settlement_serialize(
            settlement=settlement,
            channel_id=channel_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
            '422': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def settlement_upload_settlement_with_http_info(
        self,
        settlement: Annotated[Union[StrictBytes, StrictStr], Field(description="Settlement file up to 1 MB with additional data.  Format should be the one that the channel expects.")],
        channel_id: Annotated[Optional[StrictInt], Field(description="The channel ID for which the settlement is for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Imports a settlement file.

        Imports a settlement file.

        :param settlement: Settlement file up to 1 MB with additional data.  Format should be the one that the channel expects. (required)
        :type settlement: bytearray
        :param channel_id: The channel ID for which the settlement is for.
        :type channel_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._settlement_upload_settlement_serialize(
            settlement=settlement,
            channel_id=channel_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
            '422': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def settlement_upload_settlement_without_preload_content(
        self,
        settlement: Annotated[Union[StrictBytes, StrictStr], Field(description="Settlement file up to 1 MB with additional data.  Format should be the one that the channel expects.")],
        channel_id: Annotated[Optional[StrictInt], Field(description="The channel ID for which the settlement is for.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Imports a settlement file.

        Imports a settlement file.

        :param settlement: Settlement file up to 1 MB with additional data.  Format should be the one that the channel expects. (required)
        :type settlement: bytearray
        :param channel_id: The channel ID for which the settlement is for.
        :type channel_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._settlement_upload_settlement_serialize(
            settlement=settlement,
            channel_id=channel_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
            '422': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _settlement_upload_settlement_serialize(
        self,
        settlement,
        channel_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if channel_id is not None:
            
            _query_params.append(('channelId', channel_id))
            
        # process the header parameters
        # process the form parameters
        if settlement is not None:
            _files['settlement'] = settlement
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/settlements/upload',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


