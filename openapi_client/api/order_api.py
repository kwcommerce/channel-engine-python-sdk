# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.api_response import ApiResponse
from openapi_client.models.collection_of_merchant_order_response import CollectionOfMerchantOrderResponse
from openapi_client.models.fulfillment_type import FulfillmentType
from openapi_client.models.merchant_invoice_upload_request import MerchantInvoiceUploadRequest
from openapi_client.models.merchant_order_acknowledgement_request import MerchantOrderAcknowledgementRequest
from openapi_client.models.merchant_order_comment_update_request import MerchantOrderCommentUpdateRequest
from openapi_client.models.order_status_view import OrderStatusView

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OrderApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def order_acknowledge(
        self,
        merchant_order_acknowledgement_request: Annotated[Optional[MerchantOrderAcknowledgementRequest], Field(description="Relations between the id's returned by ChannelEngine and the references which the merchant uses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Acknowledges orders

        Acknowledges an order to confirm order import.

        :param merchant_order_acknowledgement_request: Relations between the id's returned by ChannelEngine and the references which the merchant uses.
        :type merchant_order_acknowledgement_request: MerchantOrderAcknowledgementRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_acknowledge_serialize(
            merchant_order_acknowledgement_request=merchant_order_acknowledgement_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_acknowledge_with_http_info(
        self,
        merchant_order_acknowledgement_request: Annotated[Optional[MerchantOrderAcknowledgementRequest], Field(description="Relations between the id's returned by ChannelEngine and the references which the merchant uses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Acknowledges orders

        Acknowledges an order to confirm order import.

        :param merchant_order_acknowledgement_request: Relations between the id's returned by ChannelEngine and the references which the merchant uses.
        :type merchant_order_acknowledgement_request: MerchantOrderAcknowledgementRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_acknowledge_serialize(
            merchant_order_acknowledgement_request=merchant_order_acknowledgement_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_acknowledge_without_preload_content(
        self,
        merchant_order_acknowledgement_request: Annotated[Optional[MerchantOrderAcknowledgementRequest], Field(description="Relations between the id's returned by ChannelEngine and the references which the merchant uses.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Acknowledges orders

        Acknowledges an order to confirm order import.

        :param merchant_order_acknowledgement_request: Relations between the id's returned by ChannelEngine and the references which the merchant uses.
        :type merchant_order_acknowledgement_request: MerchantOrderAcknowledgementRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_acknowledge_serialize(
            merchant_order_acknowledgement_request=merchant_order_acknowledgement_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_acknowledge_serialize(
        self,
        merchant_order_acknowledgement_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merchant_order_acknowledgement_request is not None:
            _body_params = merchant_order_acknowledgement_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/orders/acknowledge',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_get_by_filter(
        self,
        statuses: Annotated[Optional[List[OrderStatusView]], Field(description="Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.")] = None,
        email_addresses: Annotated[Optional[List[StrictStr]], Field(description="Client emailaddresses to filter on.")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        commercial_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on commercial order numbers.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.")] = None,
        from_created_at_date: Annotated[Optional[datetime], Field(description="Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.")] = None,
        to_created_at_date: Annotated[Optional[datetime], Field(description="Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.")] = None,
        exclude_marketplace_fulfilled_orders_and_lines: Annotated[Optional[StrictBool], Field(description="Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.")] = None,
        only_with_cancellation_requests: Annotated[Optional[StrictBool], Field(description="Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter orders on channel(s).")] = None,
        stock_location_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on stock locations")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filter on acknowledged value")] = None,
        from_updated_at_date: Annotated[Optional[datetime], Field(description="Filter on the order update date, starting from this date. This date is inclusive.")] = None,
        to_updated_at_date: Annotated[Optional[datetime], Field(description="Filter on the order update date, unitl this date. This date is exclusive.")] = None,
        from_acknowledged_date: Annotated[Optional[datetime], Field(description="Filter on the order acknowledged date, starting from this date. This date is inclusive.")] = None,
        to_acknowledged_date: Annotated[Optional[datetime], Field(description="Filter on the order acknowledged date, unitl this date. This date is exclusive.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantOrderResponse:
        """Gets orders by filter

        Gets orders based on the available filters.

        :param statuses: Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.
        :type statuses: List[OrderStatusView]
        :param email_addresses: Client emailaddresses to filter on.
        :type email_addresses: List[str]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param commercial_order_nos: Filter on commercial order numbers.
        :type commercial_order_nos: List[str]
        :param from_date: Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.
        :type from_date: datetime
        :param to_date: Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.
        :type to_date: datetime
        :param from_created_at_date: Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.
        :type from_created_at_date: datetime
        :param to_created_at_date: Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.
        :type to_created_at_date: datetime
        :param exclude_marketplace_fulfilled_orders_and_lines: Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)
        :type exclude_marketplace_fulfilled_orders_and_lines: bool
        :param fulfillment_type: Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.
        :type fulfillment_type: FulfillmentType
        :param only_with_cancellation_requests: Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        :type only_with_cancellation_requests: bool
        :param channel_ids: Filter orders on channel(s).
        :type channel_ids: List[int]
        :param stock_location_ids: Filter on stock locations
        :type stock_location_ids: List[int]
        :param is_acknowledged: Filter on acknowledged value
        :type is_acknowledged: bool
        :param from_updated_at_date: Filter on the order update date, starting from this date. This date is inclusive.
        :type from_updated_at_date: datetime
        :param to_updated_at_date: Filter on the order update date, unitl this date. This date is exclusive.
        :type to_updated_at_date: datetime
        :param from_acknowledged_date: Filter on the order acknowledged date, starting from this date. This date is inclusive.
        :type from_acknowledged_date: datetime
        :param to_acknowledged_date: Filter on the order acknowledged date, unitl this date. This date is exclusive.
        :type to_acknowledged_date: datetime
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_by_filter_serialize(
            statuses=statuses,
            email_addresses=email_addresses,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            commercial_order_nos=commercial_order_nos,
            from_date=from_date,
            to_date=to_date,
            from_created_at_date=from_created_at_date,
            to_created_at_date=to_created_at_date,
            exclude_marketplace_fulfilled_orders_and_lines=exclude_marketplace_fulfilled_orders_and_lines,
            fulfillment_type=fulfillment_type,
            only_with_cancellation_requests=only_with_cancellation_requests,
            channel_ids=channel_ids,
            stock_location_ids=stock_location_ids,
            is_acknowledged=is_acknowledged,
            from_updated_at_date=from_updated_at_date,
            to_updated_at_date=to_updated_at_date,
            from_acknowledged_date=from_acknowledged_date,
            to_acknowledged_date=to_acknowledged_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_get_by_filter_with_http_info(
        self,
        statuses: Annotated[Optional[List[OrderStatusView]], Field(description="Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.")] = None,
        email_addresses: Annotated[Optional[List[StrictStr]], Field(description="Client emailaddresses to filter on.")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        commercial_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on commercial order numbers.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.")] = None,
        from_created_at_date: Annotated[Optional[datetime], Field(description="Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.")] = None,
        to_created_at_date: Annotated[Optional[datetime], Field(description="Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.")] = None,
        exclude_marketplace_fulfilled_orders_and_lines: Annotated[Optional[StrictBool], Field(description="Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.")] = None,
        only_with_cancellation_requests: Annotated[Optional[StrictBool], Field(description="Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter orders on channel(s).")] = None,
        stock_location_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on stock locations")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filter on acknowledged value")] = None,
        from_updated_at_date: Annotated[Optional[datetime], Field(description="Filter on the order update date, starting from this date. This date is inclusive.")] = None,
        to_updated_at_date: Annotated[Optional[datetime], Field(description="Filter on the order update date, unitl this date. This date is exclusive.")] = None,
        from_acknowledged_date: Annotated[Optional[datetime], Field(description="Filter on the order acknowledged date, starting from this date. This date is inclusive.")] = None,
        to_acknowledged_date: Annotated[Optional[datetime], Field(description="Filter on the order acknowledged date, unitl this date. This date is exclusive.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantOrderResponse]:
        """Gets orders by filter

        Gets orders based on the available filters.

        :param statuses: Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.
        :type statuses: List[OrderStatusView]
        :param email_addresses: Client emailaddresses to filter on.
        :type email_addresses: List[str]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param commercial_order_nos: Filter on commercial order numbers.
        :type commercial_order_nos: List[str]
        :param from_date: Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.
        :type from_date: datetime
        :param to_date: Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.
        :type to_date: datetime
        :param from_created_at_date: Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.
        :type from_created_at_date: datetime
        :param to_created_at_date: Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.
        :type to_created_at_date: datetime
        :param exclude_marketplace_fulfilled_orders_and_lines: Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)
        :type exclude_marketplace_fulfilled_orders_and_lines: bool
        :param fulfillment_type: Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.
        :type fulfillment_type: FulfillmentType
        :param only_with_cancellation_requests: Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        :type only_with_cancellation_requests: bool
        :param channel_ids: Filter orders on channel(s).
        :type channel_ids: List[int]
        :param stock_location_ids: Filter on stock locations
        :type stock_location_ids: List[int]
        :param is_acknowledged: Filter on acknowledged value
        :type is_acknowledged: bool
        :param from_updated_at_date: Filter on the order update date, starting from this date. This date is inclusive.
        :type from_updated_at_date: datetime
        :param to_updated_at_date: Filter on the order update date, unitl this date. This date is exclusive.
        :type to_updated_at_date: datetime
        :param from_acknowledged_date: Filter on the order acknowledged date, starting from this date. This date is inclusive.
        :type from_acknowledged_date: datetime
        :param to_acknowledged_date: Filter on the order acknowledged date, unitl this date. This date is exclusive.
        :type to_acknowledged_date: datetime
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_by_filter_serialize(
            statuses=statuses,
            email_addresses=email_addresses,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            commercial_order_nos=commercial_order_nos,
            from_date=from_date,
            to_date=to_date,
            from_created_at_date=from_created_at_date,
            to_created_at_date=to_created_at_date,
            exclude_marketplace_fulfilled_orders_and_lines=exclude_marketplace_fulfilled_orders_and_lines,
            fulfillment_type=fulfillment_type,
            only_with_cancellation_requests=only_with_cancellation_requests,
            channel_ids=channel_ids,
            stock_location_ids=stock_location_ids,
            is_acknowledged=is_acknowledged,
            from_updated_at_date=from_updated_at_date,
            to_updated_at_date=to_updated_at_date,
            from_acknowledged_date=from_acknowledged_date,
            to_acknowledged_date=to_acknowledged_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_get_by_filter_without_preload_content(
        self,
        statuses: Annotated[Optional[List[OrderStatusView]], Field(description="Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.")] = None,
        email_addresses: Annotated[Optional[List[StrictStr]], Field(description="Client emailaddresses to filter on.")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        commercial_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on commercial order numbers.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.")] = None,
        from_created_at_date: Annotated[Optional[datetime], Field(description="Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.")] = None,
        to_created_at_date: Annotated[Optional[datetime], Field(description="Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.")] = None,
        exclude_marketplace_fulfilled_orders_and_lines: Annotated[Optional[StrictBool], Field(description="Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.")] = None,
        only_with_cancellation_requests: Annotated[Optional[StrictBool], Field(description="Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter orders on channel(s).")] = None,
        stock_location_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on stock locations")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filter on acknowledged value")] = None,
        from_updated_at_date: Annotated[Optional[datetime], Field(description="Filter on the order update date, starting from this date. This date is inclusive.")] = None,
        to_updated_at_date: Annotated[Optional[datetime], Field(description="Filter on the order update date, unitl this date. This date is exclusive.")] = None,
        from_acknowledged_date: Annotated[Optional[datetime], Field(description="Filter on the order acknowledged date, starting from this date. This date is inclusive.")] = None,
        to_acknowledged_date: Annotated[Optional[datetime], Field(description="Filter on the order acknowledged date, unitl this date. This date is exclusive.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets orders by filter

        Gets orders based on the available filters.

        :param statuses: Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.
        :type statuses: List[OrderStatusView]
        :param email_addresses: Client emailaddresses to filter on.
        :type email_addresses: List[str]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param commercial_order_nos: Filter on commercial order numbers.
        :type commercial_order_nos: List[str]
        :param from_date: Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.
        :type from_date: datetime
        :param to_date: Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.
        :type to_date: datetime
        :param from_created_at_date: Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.
        :type from_created_at_date: datetime
        :param to_created_at_date: Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.
        :type to_created_at_date: datetime
        :param exclude_marketplace_fulfilled_orders_and_lines: Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)
        :type exclude_marketplace_fulfilled_orders_and_lines: bool
        :param fulfillment_type: Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.
        :type fulfillment_type: FulfillmentType
        :param only_with_cancellation_requests: Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        :type only_with_cancellation_requests: bool
        :param channel_ids: Filter orders on channel(s).
        :type channel_ids: List[int]
        :param stock_location_ids: Filter on stock locations
        :type stock_location_ids: List[int]
        :param is_acknowledged: Filter on acknowledged value
        :type is_acknowledged: bool
        :param from_updated_at_date: Filter on the order update date, starting from this date. This date is inclusive.
        :type from_updated_at_date: datetime
        :param to_updated_at_date: Filter on the order update date, unitl this date. This date is exclusive.
        :type to_updated_at_date: datetime
        :param from_acknowledged_date: Filter on the order acknowledged date, starting from this date. This date is inclusive.
        :type from_acknowledged_date: datetime
        :param to_acknowledged_date: Filter on the order acknowledged date, unitl this date. This date is exclusive.
        :type to_acknowledged_date: datetime
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_by_filter_serialize(
            statuses=statuses,
            email_addresses=email_addresses,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            commercial_order_nos=commercial_order_nos,
            from_date=from_date,
            to_date=to_date,
            from_created_at_date=from_created_at_date,
            to_created_at_date=to_created_at_date,
            exclude_marketplace_fulfilled_orders_and_lines=exclude_marketplace_fulfilled_orders_and_lines,
            fulfillment_type=fulfillment_type,
            only_with_cancellation_requests=only_with_cancellation_requests,
            channel_ids=channel_ids,
            stock_location_ids=stock_location_ids,
            is_acknowledged=is_acknowledged,
            from_updated_at_date=from_updated_at_date,
            to_updated_at_date=to_updated_at_date,
            from_acknowledged_date=from_acknowledged_date,
            to_acknowledged_date=to_acknowledged_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_get_by_filter_serialize(
        self,
        statuses,
        email_addresses,
        merchant_order_nos,
        channel_order_nos,
        commercial_order_nos,
        from_date,
        to_date,
        from_created_at_date,
        to_created_at_date,
        exclude_marketplace_fulfilled_orders_and_lines,
        fulfillment_type,
        only_with_cancellation_requests,
        channel_ids,
        stock_location_ids,
        is_acknowledged,
        from_updated_at_date,
        to_updated_at_date,
        from_acknowledged_date,
        to_acknowledged_date,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'statuses': 'multi',
            'emailAddresses': 'multi',
            'merchantOrderNos': 'multi',
            'channelOrderNos': 'multi',
            'commercialOrderNos': 'multi',
            'channelIds': 'multi',
            'stockLocationIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if email_addresses is not None:
            
            _query_params.append(('emailAddresses', email_addresses))
            
        if merchant_order_nos is not None:
            
            _query_params.append(('merchantOrderNos', merchant_order_nos))
            
        if channel_order_nos is not None:
            
            _query_params.append(('channelOrderNos', channel_order_nos))
            
        if commercial_order_nos is not None:
            
            _query_params.append(('commercialOrderNos', commercial_order_nos))
            
        if from_date is not None:
            if isinstance(from_date, datetime):
                _query_params.append(
                    (
                        'fromDate',
                        from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromDate', from_date))
            
        if to_date is not None:
            if isinstance(to_date, datetime):
                _query_params.append(
                    (
                        'toDate',
                        to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toDate', to_date))
            
        if from_created_at_date is not None:
            if isinstance(from_created_at_date, datetime):
                _query_params.append(
                    (
                        'fromCreatedAtDate',
                        from_created_at_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromCreatedAtDate', from_created_at_date))
            
        if to_created_at_date is not None:
            if isinstance(to_created_at_date, datetime):
                _query_params.append(
                    (
                        'toCreatedAtDate',
                        to_created_at_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toCreatedAtDate', to_created_at_date))
            
        if exclude_marketplace_fulfilled_orders_and_lines is not None:
            
            _query_params.append(('excludeMarketplaceFulfilledOrdersAndLines', exclude_marketplace_fulfilled_orders_and_lines))
            
        if fulfillment_type is not None:
            
            _query_params.append(('fulfillmentType', fulfillment_type.value))
            
        if only_with_cancellation_requests is not None:
            
            _query_params.append(('onlyWithCancellationRequests', only_with_cancellation_requests))
            
        if channel_ids is not None:
            
            _query_params.append(('channelIds', channel_ids))
            
        if stock_location_ids is not None:
            
            _query_params.append(('stockLocationIds', stock_location_ids))
            
        if is_acknowledged is not None:
            
            _query_params.append(('isAcknowledged', is_acknowledged))
            
        if from_updated_at_date is not None:
            if isinstance(from_updated_at_date, datetime):
                _query_params.append(
                    (
                        'fromUpdatedAtDate',
                        from_updated_at_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromUpdatedAtDate', from_updated_at_date))
            
        if to_updated_at_date is not None:
            if isinstance(to_updated_at_date, datetime):
                _query_params.append(
                    (
                        'toUpdatedAtDate',
                        to_updated_at_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toUpdatedAtDate', to_updated_at_date))
            
        if from_acknowledged_date is not None:
            if isinstance(from_acknowledged_date, datetime):
                _query_params.append(
                    (
                        'fromAcknowledgedDate',
                        from_acknowledged_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromAcknowledgedDate', from_acknowledged_date))
            
        if to_acknowledged_date is not None:
            if isinstance(to_acknowledged_date, datetime):
                _query_params.append(
                    (
                        'toAcknowledgedDate',
                        to_acknowledged_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toAcknowledgedDate', to_acknowledged_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_get_new(
        self,
        stock_location_id: Annotated[Optional[StrictInt], Field(description="The ChannelEngine id of the stock location.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantOrderResponse:
        """Gets new orders

        Gets orders with the status **New**.

        :param stock_location_id: The ChannelEngine id of the stock location.
        :type stock_location_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_new_serialize(
            stock_location_id=stock_location_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_get_new_with_http_info(
        self,
        stock_location_id: Annotated[Optional[StrictInt], Field(description="The ChannelEngine id of the stock location.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantOrderResponse]:
        """Gets new orders

        Gets orders with the status **New**.

        :param stock_location_id: The ChannelEngine id of the stock location.
        :type stock_location_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_new_serialize(
            stock_location_id=stock_location_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_get_new_without_preload_content(
        self,
        stock_location_id: Annotated[Optional[StrictInt], Field(description="The ChannelEngine id of the stock location.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets new orders

        Gets orders with the status **New**.

        :param stock_location_id: The ChannelEngine id of the stock location.
        :type stock_location_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_new_serialize(
            stock_location_id=stock_location_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_get_new_serialize(
        self,
        stock_location_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if stock_location_id is not None:
            
            _query_params.append(('stockLocationId', stock_location_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/orders/new',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_invoice(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        use_customer_culture: Annotated[Optional[StrictBool], Field(description="Generate the invoice in the billing address' country's language.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Generates an order invoice

        Generates the ChannelEngine sales tax invoice for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param use_customer_culture: Generate the invoice in the billing address' country's language.
        :type use_customer_culture: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_invoice_serialize(
            merchant_order_no=merchant_order_no,
            use_customer_culture=use_customer_culture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_invoice_with_http_info(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        use_customer_culture: Annotated[Optional[StrictBool], Field(description="Generate the invoice in the billing address' country's language.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Generates an order invoice

        Generates the ChannelEngine sales tax invoice for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param use_customer_culture: Generate the invoice in the billing address' country's language.
        :type use_customer_culture: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_invoice_serialize(
            merchant_order_no=merchant_order_no,
            use_customer_culture=use_customer_culture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_invoice_without_preload_content(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        use_customer_culture: Annotated[Optional[StrictBool], Field(description="Generate the invoice in the billing address' country's language.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generates an order invoice

        Generates the ChannelEngine sales tax invoice for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param use_customer_culture: Generate the invoice in the billing address' country's language.
        :type use_customer_culture: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_invoice_serialize(
            merchant_order_no=merchant_order_no,
            use_customer_culture=use_customer_culture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_invoice_serialize(
        self,
        merchant_order_no,
        use_customer_culture,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if merchant_order_no is not None:
            _path_params['merchantOrderNo'] = merchant_order_no
        # process the query parameters
        if use_customer_culture is not None:
            
            _query_params.append(('useCustomerCulture', use_customer_culture))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/pdf', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/orders/{merchantOrderNo}/invoice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_packing_slip(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        use_customer_culture: Annotated[Optional[StrictBool], Field(description="Generate the invoice in the billing address' country's language.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Generates a packing slip

        Generates the ChannelEngine packing slip for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param use_customer_culture: Generate the invoice in the billing address' country's language.
        :type use_customer_culture: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_packing_slip_serialize(
            merchant_order_no=merchant_order_no,
            use_customer_culture=use_customer_culture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_packing_slip_with_http_info(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        use_customer_culture: Annotated[Optional[StrictBool], Field(description="Generate the invoice in the billing address' country's language.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Generates a packing slip

        Generates the ChannelEngine packing slip for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param use_customer_culture: Generate the invoice in the billing address' country's language.
        :type use_customer_culture: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_packing_slip_serialize(
            merchant_order_no=merchant_order_no,
            use_customer_culture=use_customer_culture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_packing_slip_without_preload_content(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        use_customer_culture: Annotated[Optional[StrictBool], Field(description="Generate the invoice in the billing address' country's language.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generates a packing slip

        Generates the ChannelEngine packing slip for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param use_customer_culture: Generate the invoice in the billing address' country's language.
        :type use_customer_culture: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_packing_slip_serialize(
            merchant_order_no=merchant_order_no,
            use_customer_culture=use_customer_culture,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_packing_slip_serialize(
        self,
        merchant_order_no,
        use_customer_culture,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if merchant_order_no is not None:
            _path_params['merchantOrderNo'] = merchant_order_no
        # process the query parameters
        if use_customer_culture is not None:
            
            _query_params.append(('useCustomerCulture', use_customer_culture))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/pdf', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/orders/{merchantOrderNo}/packingslip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_update(
        self,
        merchant_order_comment_update_request: Optional[MerchantOrderCommentUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Updates an order comment

        Updates the merchant comment for an order based on the ChannelEngine **Order ID** or the **Merchant order number**.

        :param merchant_order_comment_update_request:
        :type merchant_order_comment_update_request: MerchantOrderCommentUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_update_serialize(
            merchant_order_comment_update_request=merchant_order_comment_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_update_with_http_info(
        self,
        merchant_order_comment_update_request: Optional[MerchantOrderCommentUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Updates an order comment

        Updates the merchant comment for an order based on the ChannelEngine **Order ID** or the **Merchant order number**.

        :param merchant_order_comment_update_request:
        :type merchant_order_comment_update_request: MerchantOrderCommentUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_update_serialize(
            merchant_order_comment_update_request=merchant_order_comment_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_update_without_preload_content(
        self,
        merchant_order_comment_update_request: Optional[MerchantOrderCommentUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates an order comment

        Updates the merchant comment for an order based on the ChannelEngine **Order ID** or the **Merchant order number**.

        :param merchant_order_comment_update_request:
        :type merchant_order_comment_update_request: MerchantOrderCommentUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_update_serialize(
            merchant_order_comment_update_request=merchant_order_comment_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_update_serialize(
        self,
        merchant_order_comment_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merchant_order_comment_update_request is not None:
            _body_params = merchant_order_comment_update_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/orders/comment',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_upload_invoice(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        invoice: Annotated[Union[StrictBytes, StrictStr], Field(description="PDF invoice file up to 1 MB with additional data.")],
        invoice_number: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="The invoice number used in the invoice.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Uploads an order invoice

        Uploads the invoice for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param invoice: PDF invoice file up to 1 MB with additional data. (required)
        :type invoice: bytearray
        :param invoice_number: The invoice number used in the invoice.
        :type invoice_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_upload_invoice_serialize(
            merchant_order_no=merchant_order_no,
            invoice=invoice,
            invoice_number=invoice_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_upload_invoice_with_http_info(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        invoice: Annotated[Union[StrictBytes, StrictStr], Field(description="PDF invoice file up to 1 MB with additional data.")],
        invoice_number: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="The invoice number used in the invoice.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Uploads an order invoice

        Uploads the invoice for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param invoice: PDF invoice file up to 1 MB with additional data. (required)
        :type invoice: bytearray
        :param invoice_number: The invoice number used in the invoice.
        :type invoice_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_upload_invoice_serialize(
            merchant_order_no=merchant_order_no,
            invoice=invoice,
            invoice_number=invoice_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_upload_invoice_without_preload_content(
        self,
        merchant_order_no: Annotated[StrictStr, Field(description="The unique order reference as used by the merchant.")],
        invoice: Annotated[Union[StrictBytes, StrictStr], Field(description="PDF invoice file up to 1 MB with additional data.")],
        invoice_number: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="The invoice number used in the invoice.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads an order invoice

        Uploads the invoice for an order in PDF.

        :param merchant_order_no: The unique order reference as used by the merchant. (required)
        :type merchant_order_no: str
        :param invoice: PDF invoice file up to 1 MB with additional data. (required)
        :type invoice: bytearray
        :param invoice_number: The invoice number used in the invoice.
        :type invoice_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_upload_invoice_serialize(
            merchant_order_no=merchant_order_no,
            invoice=invoice,
            invoice_number=invoice_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_upload_invoice_serialize(
        self,
        merchant_order_no,
        invoice,
        invoice_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if merchant_order_no is not None:
            _path_params['merchantOrderNo'] = merchant_order_no
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if invoice is not None:
            _files['invoice'] = invoice
        if invoice_number is not None:
            _form_params.append(('invoiceNumber', invoice_number))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/orders/{merchantOrderNo}/invoice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_upload_invoice_as_string(
        self,
        merchant_order_no: StrictStr,
        merchant_invoice_upload_request: Optional[MerchantInvoiceUploadRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Uploads an order invoice PDF from Base64 string.

        Uploads an order invoice PDF from Base64 string.<br />Invoice size must be less than 1 mb.

        :param merchant_order_no: (required)
        :type merchant_order_no: str
        :param merchant_invoice_upload_request:
        :type merchant_invoice_upload_request: MerchantInvoiceUploadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_upload_invoice_as_string_serialize(
            merchant_order_no=merchant_order_no,
            merchant_invoice_upload_request=merchant_invoice_upload_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_upload_invoice_as_string_with_http_info(
        self,
        merchant_order_no: StrictStr,
        merchant_invoice_upload_request: Optional[MerchantInvoiceUploadRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Uploads an order invoice PDF from Base64 string.

        Uploads an order invoice PDF from Base64 string.<br />Invoice size must be less than 1 mb.

        :param merchant_order_no: (required)
        :type merchant_order_no: str
        :param merchant_invoice_upload_request:
        :type merchant_invoice_upload_request: MerchantInvoiceUploadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_upload_invoice_as_string_serialize(
            merchant_order_no=merchant_order_no,
            merchant_invoice_upload_request=merchant_invoice_upload_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_upload_invoice_as_string_without_preload_content(
        self,
        merchant_order_no: StrictStr,
        merchant_invoice_upload_request: Optional[MerchantInvoiceUploadRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads an order invoice PDF from Base64 string.

        Uploads an order invoice PDF from Base64 string.<br />Invoice size must be less than 1 mb.

        :param merchant_order_no: (required)
        :type merchant_order_no: str
        :param merchant_invoice_upload_request:
        :type merchant_invoice_upload_request: MerchantInvoiceUploadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_upload_invoice_as_string_serialize(
            merchant_order_no=merchant_order_no,
            merchant_invoice_upload_request=merchant_invoice_upload_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_upload_invoice_as_string_serialize(
        self,
        merchant_order_no,
        merchant_invoice_upload_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if merchant_order_no is not None:
            _path_params['merchantOrderNo'] = merchant_order_no
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merchant_invoice_upload_request is not None:
            _body_params = merchant_invoice_upload_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/orders/{merchantOrderNo}/invoice-base64',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


