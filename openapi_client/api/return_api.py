# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.api_response import ApiResponse
from openapi_client.models.collection_of_merchant_return_response import CollectionOfMerchantReturnResponse
from openapi_client.models.collection_of_merchant_single_order_return_response import CollectionOfMerchantSingleOrderReturnResponse
from openapi_client.models.creator_filter import CreatorFilter
from openapi_client.models.fulfillment_type import FulfillmentType
from openapi_client.models.merchant_return_acknowledge_request import MerchantReturnAcknowledgeRequest
from openapi_client.models.merchant_return_request import MerchantReturnRequest
from openapi_client.models.merchant_return_update_request import MerchantReturnUpdateRequest
from openapi_client.models.return_reason import ReturnReason
from openapi_client.models.return_status import ReturnStatus

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ReturnApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def return_acknowledge(
        self,
        merchant_return_acknowledge_request: Optional[MerchantReturnAcknowledgeRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Acknowledges a return

        Acknowledges a return based on the **Return ID** provided.<br /><br />**NB:** by acknowledging a return, you signal that it was registered in your system.<br />You can later filter your returns on the **Is acknowledged** parameter.

        :param merchant_return_acknowledge_request:
        :type merchant_return_acknowledge_request: MerchantReturnAcknowledgeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_acknowledge_serialize(
            merchant_return_acknowledge_request=merchant_return_acknowledge_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_acknowledge_with_http_info(
        self,
        merchant_return_acknowledge_request: Optional[MerchantReturnAcknowledgeRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Acknowledges a return

        Acknowledges a return based on the **Return ID** provided.<br /><br />**NB:** by acknowledging a return, you signal that it was registered in your system.<br />You can later filter your returns on the **Is acknowledged** parameter.

        :param merchant_return_acknowledge_request:
        :type merchant_return_acknowledge_request: MerchantReturnAcknowledgeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_acknowledge_serialize(
            merchant_return_acknowledge_request=merchant_return_acknowledge_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_acknowledge_without_preload_content(
        self,
        merchant_return_acknowledge_request: Optional[MerchantReturnAcknowledgeRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Acknowledges a return

        Acknowledges a return based on the **Return ID** provided.<br /><br />**NB:** by acknowledging a return, you signal that it was registered in your system.<br />You can later filter your returns on the **Is acknowledged** parameter.

        :param merchant_return_acknowledge_request:
        :type merchant_return_acknowledge_request: MerchantReturnAcknowledgeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_acknowledge_serialize(
            merchant_return_acknowledge_request=merchant_return_acknowledge_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_acknowledge_serialize(
        self,
        merchant_return_acknowledge_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merchant_return_acknowledge_request is not None:
            _body_params = merchant_return_acknowledge_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/returns/merchant/acknowledge',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def return_declare_for_merchant(
        self,
        merchant_return_request: Optional[MerchantReturnRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Creates merchant return

        Marks an order as either fully or partially returned.<br /><br />**NB:** this endpoint is used for merchant returns (i.e.: returns dealt with by the merchant).

        :param merchant_return_request:
        :type merchant_return_request: MerchantReturnRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_declare_for_merchant_serialize(
            merchant_return_request=merchant_return_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_declare_for_merchant_with_http_info(
        self,
        merchant_return_request: Optional[MerchantReturnRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Creates merchant return

        Marks an order as either fully or partially returned.<br /><br />**NB:** this endpoint is used for merchant returns (i.e.: returns dealt with by the merchant).

        :param merchant_return_request:
        :type merchant_return_request: MerchantReturnRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_declare_for_merchant_serialize(
            merchant_return_request=merchant_return_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_declare_for_merchant_without_preload_content(
        self,
        merchant_return_request: Optional[MerchantReturnRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates merchant return

        Marks an order as either fully or partially returned.<br /><br />**NB:** this endpoint is used for merchant returns (i.e.: returns dealt with by the merchant).

        :param merchant_return_request:
        :type merchant_return_request: MerchantReturnRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_declare_for_merchant_serialize(
            merchant_return_request=merchant_return_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_declare_for_merchant_serialize(
        self,
        merchant_return_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merchant_return_request is not None:
            _body_params = merchant_return_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/returns/merchant',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def return_get_by_merchant_order_no(
        self,
        merchant_order_no: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantSingleOrderReturnResponse:
        """Gets a return

        Gets the returns based on the **Merchant order number** provided.<br /><br />**NB:** this endpoint is meant for merchants. Marketplaces should use the **GET /v2/returns/channel** call instead.

        :param merchant_order_no: (required)
        :type merchant_order_no: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_by_merchant_order_no_serialize(
            merchant_order_no=merchant_order_no,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantSingleOrderReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_get_by_merchant_order_no_with_http_info(
        self,
        merchant_order_no: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantSingleOrderReturnResponse]:
        """Gets a return

        Gets the returns based on the **Merchant order number** provided.<br /><br />**NB:** this endpoint is meant for merchants. Marketplaces should use the **GET /v2/returns/channel** call instead.

        :param merchant_order_no: (required)
        :type merchant_order_no: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_by_merchant_order_no_serialize(
            merchant_order_no=merchant_order_no,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantSingleOrderReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_get_by_merchant_order_no_without_preload_content(
        self,
        merchant_order_no: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a return

        Gets the returns based on the **Merchant order number** provided.<br /><br />**NB:** this endpoint is meant for merchants. Marketplaces should use the **GET /v2/returns/channel** call instead.

        :param merchant_order_no: (required)
        :type merchant_order_no: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_by_merchant_order_no_serialize(
            merchant_order_no=merchant_order_no,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantSingleOrderReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_get_by_merchant_order_no_serialize(
        self,
        merchant_order_no,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if merchant_order_no is not None:
            _path_params['merchantOrderNo'] = merchant_order_no
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/returns/merchant/{merchantOrderNo}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def return_get_declared_by_channel(
        self,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter on the fulfillment type of the order.")] = None,
        statuses: Annotated[Optional[List[ReturnStatus]], Field(description="Return status(es) to filter on.")] = None,
        reasons: Annotated[Optional[List[ReturnReason]], Field(description="Return reason(s) to filter on.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, until this date. This date is exclusive.")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filters based on acknowledgements")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantReturnResponse:
        """Gets marketplace returns

        Gets all returns created by the marketplace.<br /><br />**NB:** this endpoint is used for both marketplace and marketplace-fulfilled returns.

        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param fulfillment_type: Filter on the fulfillment type of the order.
        :type fulfillment_type: FulfillmentType
        :param statuses: Return status(es) to filter on.
        :type statuses: List[ReturnStatus]
        :param reasons: Return reason(s) to filter on.
        :type reasons: List[ReturnReason]
        :param from_date: Filter on the creation date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the creation date, until this date. This date is exclusive.
        :type to_date: datetime
        :param is_acknowledged: Filters based on acknowledgements
        :type is_acknowledged: bool
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_declared_by_channel_serialize(
            channel_ids=channel_ids,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            fulfillment_type=fulfillment_type,
            statuses=statuses,
            reasons=reasons,
            from_date=from_date,
            to_date=to_date,
            is_acknowledged=is_acknowledged,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_get_declared_by_channel_with_http_info(
        self,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter on the fulfillment type of the order.")] = None,
        statuses: Annotated[Optional[List[ReturnStatus]], Field(description="Return status(es) to filter on.")] = None,
        reasons: Annotated[Optional[List[ReturnReason]], Field(description="Return reason(s) to filter on.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, until this date. This date is exclusive.")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filters based on acknowledgements")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantReturnResponse]:
        """Gets marketplace returns

        Gets all returns created by the marketplace.<br /><br />**NB:** this endpoint is used for both marketplace and marketplace-fulfilled returns.

        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param fulfillment_type: Filter on the fulfillment type of the order.
        :type fulfillment_type: FulfillmentType
        :param statuses: Return status(es) to filter on.
        :type statuses: List[ReturnStatus]
        :param reasons: Return reason(s) to filter on.
        :type reasons: List[ReturnReason]
        :param from_date: Filter on the creation date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the creation date, until this date. This date is exclusive.
        :type to_date: datetime
        :param is_acknowledged: Filters based on acknowledgements
        :type is_acknowledged: bool
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_declared_by_channel_serialize(
            channel_ids=channel_ids,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            fulfillment_type=fulfillment_type,
            statuses=statuses,
            reasons=reasons,
            from_date=from_date,
            to_date=to_date,
            is_acknowledged=is_acknowledged,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_get_declared_by_channel_without_preload_content(
        self,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter on the fulfillment type of the order.")] = None,
        statuses: Annotated[Optional[List[ReturnStatus]], Field(description="Return status(es) to filter on.")] = None,
        reasons: Annotated[Optional[List[ReturnReason]], Field(description="Return reason(s) to filter on.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, until this date. This date is exclusive.")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filters based on acknowledgements")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets marketplace returns

        Gets all returns created by the marketplace.<br /><br />**NB:** this endpoint is used for both marketplace and marketplace-fulfilled returns.

        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param fulfillment_type: Filter on the fulfillment type of the order.
        :type fulfillment_type: FulfillmentType
        :param statuses: Return status(es) to filter on.
        :type statuses: List[ReturnStatus]
        :param reasons: Return reason(s) to filter on.
        :type reasons: List[ReturnReason]
        :param from_date: Filter on the creation date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the creation date, until this date. This date is exclusive.
        :type to_date: datetime
        :param is_acknowledged: Filters based on acknowledgements
        :type is_acknowledged: bool
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_declared_by_channel_serialize(
            channel_ids=channel_ids,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            fulfillment_type=fulfillment_type,
            statuses=statuses,
            reasons=reasons,
            from_date=from_date,
            to_date=to_date,
            is_acknowledged=is_acknowledged,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_get_declared_by_channel_serialize(
        self,
        channel_ids,
        merchant_order_nos,
        channel_order_nos,
        fulfillment_type,
        statuses,
        reasons,
        from_date,
        to_date,
        is_acknowledged,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'channelIds': 'multi',
            'merchantOrderNos': 'multi',
            'channelOrderNos': 'multi',
            'statuses': 'multi',
            'reasons': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if channel_ids is not None:
            
            _query_params.append(('channelIds', channel_ids))
            
        if merchant_order_nos is not None:
            
            _query_params.append(('merchantOrderNos', merchant_order_nos))
            
        if channel_order_nos is not None:
            
            _query_params.append(('channelOrderNos', channel_order_nos))
            
        if fulfillment_type is not None:
            
            _query_params.append(('fulfillmentType', fulfillment_type.value))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if reasons is not None:
            
            _query_params.append(('reasons', reasons))
            
        if from_date is not None:
            if isinstance(from_date, datetime):
                _query_params.append(
                    (
                        'fromDate',
                        from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromDate', from_date))
            
        if to_date is not None:
            if isinstance(to_date, datetime):
                _query_params.append(
                    (
                        'toDate',
                        to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toDate', to_date))
            
        if is_acknowledged is not None:
            
            _query_params.append(('isAcknowledged', is_acknowledged))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/returns/merchant',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def return_get_returns(
        self,
        creator_type: Annotated[Optional[CreatorFilter], Field(description="Filter on the return's creator. Default is MIXED.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter on the fulfillment type of the order.")] = None,
        statuses: Annotated[Optional[List[ReturnStatus]], Field(description="Return status(es) to filter on.")] = None,
        reasons: Annotated[Optional[List[ReturnReason]], Field(description="Return reason(s) to filter on.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, until this date. This date is exclusive.")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filters based on acknowledgements")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantReturnResponse:
        """Gets returns by filter

        Gets the returns based on the filter provided.<br /><br />**NB:** this endpoint is used to retrieve all types of returns: merchant, marketplace, mixed, and marketplace-fulfilled.

        :param creator_type: Filter on the return's creator. Default is MIXED.
        :type creator_type: CreatorFilter
        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param fulfillment_type: Filter on the fulfillment type of the order.
        :type fulfillment_type: FulfillmentType
        :param statuses: Return status(es) to filter on.
        :type statuses: List[ReturnStatus]
        :param reasons: Return reason(s) to filter on.
        :type reasons: List[ReturnReason]
        :param from_date: Filter on the creation date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the creation date, until this date. This date is exclusive.
        :type to_date: datetime
        :param is_acknowledged: Filters based on acknowledgements
        :type is_acknowledged: bool
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_returns_serialize(
            creator_type=creator_type,
            channel_ids=channel_ids,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            fulfillment_type=fulfillment_type,
            statuses=statuses,
            reasons=reasons,
            from_date=from_date,
            to_date=to_date,
            is_acknowledged=is_acknowledged,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_get_returns_with_http_info(
        self,
        creator_type: Annotated[Optional[CreatorFilter], Field(description="Filter on the return's creator. Default is MIXED.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter on the fulfillment type of the order.")] = None,
        statuses: Annotated[Optional[List[ReturnStatus]], Field(description="Return status(es) to filter on.")] = None,
        reasons: Annotated[Optional[List[ReturnReason]], Field(description="Return reason(s) to filter on.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, until this date. This date is exclusive.")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filters based on acknowledgements")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantReturnResponse]:
        """Gets returns by filter

        Gets the returns based on the filter provided.<br /><br />**NB:** this endpoint is used to retrieve all types of returns: merchant, marketplace, mixed, and marketplace-fulfilled.

        :param creator_type: Filter on the return's creator. Default is MIXED.
        :type creator_type: CreatorFilter
        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param fulfillment_type: Filter on the fulfillment type of the order.
        :type fulfillment_type: FulfillmentType
        :param statuses: Return status(es) to filter on.
        :type statuses: List[ReturnStatus]
        :param reasons: Return reason(s) to filter on.
        :type reasons: List[ReturnReason]
        :param from_date: Filter on the creation date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the creation date, until this date. This date is exclusive.
        :type to_date: datetime
        :param is_acknowledged: Filters based on acknowledgements
        :type is_acknowledged: bool
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_returns_serialize(
            creator_type=creator_type,
            channel_ids=channel_ids,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            fulfillment_type=fulfillment_type,
            statuses=statuses,
            reasons=reasons,
            from_date=from_date,
            to_date=to_date,
            is_acknowledged=is_acknowledged,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_get_returns_without_preload_content(
        self,
        creator_type: Annotated[Optional[CreatorFilter], Field(description="Filter on the return's creator. Default is MIXED.")] = None,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        fulfillment_type: Annotated[Optional[FulfillmentType], Field(description="Filter on the fulfillment type of the order.")] = None,
        statuses: Annotated[Optional[List[ReturnStatus]], Field(description="Return status(es) to filter on.")] = None,
        reasons: Annotated[Optional[List[ReturnReason]], Field(description="Return reason(s) to filter on.")] = None,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the creation date, until this date. This date is exclusive.")] = None,
        is_acknowledged: Annotated[Optional[StrictBool], Field(description="Filters based on acknowledgements")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets returns by filter

        Gets the returns based on the filter provided.<br /><br />**NB:** this endpoint is used to retrieve all types of returns: merchant, marketplace, mixed, and marketplace-fulfilled.

        :param creator_type: Filter on the return's creator. Default is MIXED.
        :type creator_type: CreatorFilter
        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param fulfillment_type: Filter on the fulfillment type of the order.
        :type fulfillment_type: FulfillmentType
        :param statuses: Return status(es) to filter on.
        :type statuses: List[ReturnStatus]
        :param reasons: Return reason(s) to filter on.
        :type reasons: List[ReturnReason]
        :param from_date: Filter on the creation date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the creation date, until this date. This date is exclusive.
        :type to_date: datetime
        :param is_acknowledged: Filters based on acknowledgements
        :type is_acknowledged: bool
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_returns_serialize(
            creator_type=creator_type,
            channel_ids=channel_ids,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            fulfillment_type=fulfillment_type,
            statuses=statuses,
            reasons=reasons,
            from_date=from_date,
            to_date=to_date,
            is_acknowledged=is_acknowledged,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_get_returns_serialize(
        self,
        creator_type,
        channel_ids,
        merchant_order_nos,
        channel_order_nos,
        fulfillment_type,
        statuses,
        reasons,
        from_date,
        to_date,
        is_acknowledged,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'channelIds': 'multi',
            'merchantOrderNos': 'multi',
            'channelOrderNos': 'multi',
            'statuses': 'multi',
            'reasons': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if creator_type is not None:
            
            _query_params.append(('creatorType', creator_type.value))
            
        if channel_ids is not None:
            
            _query_params.append(('channelIds', channel_ids))
            
        if merchant_order_nos is not None:
            
            _query_params.append(('merchantOrderNos', merchant_order_nos))
            
        if channel_order_nos is not None:
            
            _query_params.append(('channelOrderNos', channel_order_nos))
            
        if fulfillment_type is not None:
            
            _query_params.append(('fulfillmentType', fulfillment_type.value))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if reasons is not None:
            
            _query_params.append(('reasons', reasons))
            
        if from_date is not None:
            if isinstance(from_date, datetime):
                _query_params.append(
                    (
                        'fromDate',
                        from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromDate', from_date))
            
        if to_date is not None:
            if isinstance(to_date, datetime):
                _query_params.append(
                    (
                        'toDate',
                        to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toDate', to_date))
            
        if is_acknowledged is not None:
            
            _query_params.append(('isAcknowledged', is_acknowledged))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/returns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def return_get_unhandled(
        self,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantReturnResponse:
        """Gets unhandled returns

        Gets all marketplace returns with the status **In progress**.

        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_unhandled_serialize(
            channel_ids=channel_ids,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_get_unhandled_with_http_info(
        self,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantReturnResponse]:
        """Gets unhandled returns

        Gets all marketplace returns with the status **In progress**.

        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_unhandled_serialize(
            channel_ids=channel_ids,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_get_unhandled_without_preload_content(
        self,
        channel_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter on Channel IDs")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets unhandled returns

        Gets all marketplace returns with the status **In progress**.

        :param channel_ids: Filter on Channel IDs
        :type channel_ids: List[int]
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_get_unhandled_serialize(
            channel_ids=channel_ids,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantReturnResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_get_unhandled_serialize(
        self,
        channel_ids,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'channelIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if channel_ids is not None:
            
            _query_params.append(('channelIds', channel_ids))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/returns/merchant/new',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def return_update_for_merchant(
        self,
        merchant_return_update_request: Optional[MerchantReturnUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Marks returns as received

        Marks a return as either fully or partially received.<br /> <br />**NB:** this endpoint is used for marketplace returns, and you can only accept or reject a return once.

        :param merchant_return_update_request:
        :type merchant_return_update_request: MerchantReturnUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_update_for_merchant_serialize(
            merchant_return_update_request=merchant_return_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def return_update_for_merchant_with_http_info(
        self,
        merchant_return_update_request: Optional[MerchantReturnUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Marks returns as received

        Marks a return as either fully or partially received.<br /> <br />**NB:** this endpoint is used for marketplace returns, and you can only accept or reject a return once.

        :param merchant_return_update_request:
        :type merchant_return_update_request: MerchantReturnUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_update_for_merchant_serialize(
            merchant_return_update_request=merchant_return_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def return_update_for_merchant_without_preload_content(
        self,
        merchant_return_update_request: Optional[MerchantReturnUpdateRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Marks returns as received

        Marks a return as either fully or partially received.<br /> <br />**NB:** this endpoint is used for marketplace returns, and you can only accept or reject a return once.

        :param merchant_return_update_request:
        :type merchant_return_update_request: MerchantReturnUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._return_update_for_merchant_serialize(
            merchant_return_update_request=merchant_return_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApiResponse",
            '400': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _return_update_for_merchant_serialize(
        self,
        merchant_return_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if merchant_return_update_request is not None:
            _body_params = merchant_return_update_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/returns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


