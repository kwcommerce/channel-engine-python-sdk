# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.collection_of_merchant_notification_response import CollectionOfMerchantNotificationResponse
from openapi_client.models.notification_type import NotificationType

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class NotificationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def notification_index(
        self,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the notification date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the notification date, until this date. This date is exclusive.")] = None,
        types: Annotated[Optional[List[NotificationType]], Field(description="Notification type(s) to filter on.")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        merchant_return_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique return reference used by the merchant.")] = None,
        channel_return_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique return reference used by the channel.")] = None,
        merchant_shipment_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique shipment reference used by the merchant.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfMerchantNotificationResponse:
        """Gets notifications

        Gets ChannelEngine notifications based on the available filters.

        :param from_date: Filter on the notification date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the notification date, until this date. This date is exclusive.
        :type to_date: datetime
        :param types: Notification type(s) to filter on.
        :type types: List[NotificationType]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param merchant_return_nos: Filter on unique return reference used by the merchant.
        :type merchant_return_nos: List[str]
        :param channel_return_nos: Filter on unique return reference used by the channel.
        :type channel_return_nos: List[str]
        :param merchant_shipment_nos: Filter on unique shipment reference used by the merchant.
        :type merchant_shipment_nos: List[str]
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_index_serialize(
            from_date=from_date,
            to_date=to_date,
            types=types,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            merchant_return_nos=merchant_return_nos,
            channel_return_nos=channel_return_nos,
            merchant_shipment_nos=merchant_shipment_nos,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantNotificationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def notification_index_with_http_info(
        self,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the notification date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the notification date, until this date. This date is exclusive.")] = None,
        types: Annotated[Optional[List[NotificationType]], Field(description="Notification type(s) to filter on.")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        merchant_return_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique return reference used by the merchant.")] = None,
        channel_return_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique return reference used by the channel.")] = None,
        merchant_shipment_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique shipment reference used by the merchant.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfMerchantNotificationResponse]:
        """Gets notifications

        Gets ChannelEngine notifications based on the available filters.

        :param from_date: Filter on the notification date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the notification date, until this date. This date is exclusive.
        :type to_date: datetime
        :param types: Notification type(s) to filter on.
        :type types: List[NotificationType]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param merchant_return_nos: Filter on unique return reference used by the merchant.
        :type merchant_return_nos: List[str]
        :param channel_return_nos: Filter on unique return reference used by the channel.
        :type channel_return_nos: List[str]
        :param merchant_shipment_nos: Filter on unique shipment reference used by the merchant.
        :type merchant_shipment_nos: List[str]
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_index_serialize(
            from_date=from_date,
            to_date=to_date,
            types=types,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            merchant_return_nos=merchant_return_nos,
            channel_return_nos=channel_return_nos,
            merchant_shipment_nos=merchant_shipment_nos,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantNotificationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def notification_index_without_preload_content(
        self,
        from_date: Annotated[Optional[datetime], Field(description="Filter on the notification date, starting from this date. This date is inclusive.")] = None,
        to_date: Annotated[Optional[datetime], Field(description="Filter on the notification date, until this date. This date is exclusive.")] = None,
        types: Annotated[Optional[List[NotificationType]], Field(description="Notification type(s) to filter on.")] = None,
        merchant_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the merchant.")] = None,
        channel_order_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique order reference used by the channel.")] = None,
        merchant_return_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique return reference used by the merchant.")] = None,
        channel_return_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique return reference used by the channel.")] = None,
        merchant_shipment_nos: Annotated[Optional[List[StrictStr]], Field(description="Filter on unique shipment reference used by the merchant.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="The page to filter on. Starts at 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets notifications

        Gets ChannelEngine notifications based on the available filters.

        :param from_date: Filter on the notification date, starting from this date. This date is inclusive.
        :type from_date: datetime
        :param to_date: Filter on the notification date, until this date. This date is exclusive.
        :type to_date: datetime
        :param types: Notification type(s) to filter on.
        :type types: List[NotificationType]
        :param merchant_order_nos: Filter on unique order reference used by the merchant.
        :type merchant_order_nos: List[str]
        :param channel_order_nos: Filter on unique order reference used by the channel.
        :type channel_order_nos: List[str]
        :param merchant_return_nos: Filter on unique return reference used by the merchant.
        :type merchant_return_nos: List[str]
        :param channel_return_nos: Filter on unique return reference used by the channel.
        :type channel_return_nos: List[str]
        :param merchant_shipment_nos: Filter on unique shipment reference used by the merchant.
        :type merchant_shipment_nos: List[str]
        :param page: The page to filter on. Starts at 1.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._notification_index_serialize(
            from_date=from_date,
            to_date=to_date,
            types=types,
            merchant_order_nos=merchant_order_nos,
            channel_order_nos=channel_order_nos,
            merchant_return_nos=merchant_return_nos,
            channel_return_nos=channel_return_nos,
            merchant_shipment_nos=merchant_shipment_nos,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfMerchantNotificationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _notification_index_serialize(
        self,
        from_date,
        to_date,
        types,
        merchant_order_nos,
        channel_order_nos,
        merchant_return_nos,
        channel_return_nos,
        merchant_shipment_nos,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'types': 'multi',
            'merchantOrderNos': 'multi',
            'channelOrderNos': 'multi',
            'merchantReturnNos': 'multi',
            'channelReturnNos': 'multi',
            'merchantShipmentNos': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if from_date is not None:
            if isinstance(from_date, datetime):
                _query_params.append(
                    (
                        'fromDate',
                        from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromDate', from_date))
            
        if to_date is not None:
            if isinstance(to_date, datetime):
                _query_params.append(
                    (
                        'toDate',
                        to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toDate', to_date))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if merchant_order_nos is not None:
            
            _query_params.append(('merchantOrderNos', merchant_order_nos))
            
        if channel_order_nos is not None:
            
            _query_params.append(('channelOrderNos', channel_order_nos))
            
        if merchant_return_nos is not None:
            
            _query_params.append(('merchantReturnNos', merchant_return_nos))
            
        if channel_return_nos is not None:
            
            _query_params.append(('channelReturnNos', channel_return_nos))
            
        if merchant_shipment_nos is not None:
            
            _query_params.append(('merchantShipmentNos', merchant_shipment_nos))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/notifications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


