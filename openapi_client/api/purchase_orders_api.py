# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.api_response import ApiResponse
from openapi_client.models.bulk_merchant_create_purchase_order_invoices_request import BulkMerchantCreatePurchaseOrderInvoicesRequest
from openapi_client.models.collection_of_i_purchase_order_by_filter import CollectionOfIPurchaseOrderByFilter
from openapi_client.models.collection_of_i_purchase_order_shipment_by_filter import CollectionOfIPurchaseOrderShipmentByFilter
from openapi_client.models.modules_purchase_order_status import ModulesPurchaseOrderStatus
from openapi_client.models.modules_purchase_order_type import ModulesPurchaseOrderType
from openapi_client.models.purchase_order_identifier_type import PurchaseOrderIdentifierType
from openapi_client.models.purchase_order_shipment_identifier_type_value import PurchaseOrderShipmentIdentifierTypeValue
from openapi_client.models.single_merchant_acknowledge_purchase_order_lines_request import SingleMerchantAcknowledgePurchaseOrderLinesRequest
from openapi_client.models.single_merchant_create_purchase_order_invoice_request import SingleMerchantCreatePurchaseOrderInvoiceRequest
from openapi_client.models.single_merchant_create_purchase_order_shipment_request import SingleMerchantCreatePurchaseOrderShipmentRequest
from openapi_client.models.single_merchant_update_purchase_order_shipment_request import SingleMerchantUpdatePurchaseOrderShipmentRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PurchaseOrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def acknowledge(
        self,
        single_merchant_acknowledge_purchase_order_lines_request: Annotated[Optional[SingleMerchantAcknowledgePurchaseOrderLinesRequest], Field(description="Model for purchase order and lines data to be acknowledged with the channel.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Acknowledges lines of a purchase order

        Creates line acknowledgements (i.e., accepted, backordered, rejected) for a purchase order.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param single_merchant_acknowledge_purchase_order_lines_request: Model for purchase order and lines data to be acknowledged with the channel.
        :type single_merchant_acknowledge_purchase_order_lines_request: SingleMerchantAcknowledgePurchaseOrderLinesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._acknowledge_serialize(
            single_merchant_acknowledge_purchase_order_lines_request=single_merchant_acknowledge_purchase_order_lines_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def acknowledge_with_http_info(
        self,
        single_merchant_acknowledge_purchase_order_lines_request: Annotated[Optional[SingleMerchantAcknowledgePurchaseOrderLinesRequest], Field(description="Model for purchase order and lines data to be acknowledged with the channel.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Acknowledges lines of a purchase order

        Creates line acknowledgements (i.e., accepted, backordered, rejected) for a purchase order.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param single_merchant_acknowledge_purchase_order_lines_request: Model for purchase order and lines data to be acknowledged with the channel.
        :type single_merchant_acknowledge_purchase_order_lines_request: SingleMerchantAcknowledgePurchaseOrderLinesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._acknowledge_serialize(
            single_merchant_acknowledge_purchase_order_lines_request=single_merchant_acknowledge_purchase_order_lines_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def acknowledge_without_preload_content(
        self,
        single_merchant_acknowledge_purchase_order_lines_request: Annotated[Optional[SingleMerchantAcknowledgePurchaseOrderLinesRequest], Field(description="Model for purchase order and lines data to be acknowledged with the channel.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Acknowledges lines of a purchase order

        Creates line acknowledgements (i.e., accepted, backordered, rejected) for a purchase order.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param single_merchant_acknowledge_purchase_order_lines_request: Model for purchase order and lines data to be acknowledged with the channel.
        :type single_merchant_acknowledge_purchase_order_lines_request: SingleMerchantAcknowledgePurchaseOrderLinesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._acknowledge_serialize(
            single_merchant_acknowledge_purchase_order_lines_request=single_merchant_acknowledge_purchase_order_lines_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _acknowledge_serialize(
        self,
        single_merchant_acknowledge_purchase_order_lines_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if single_merchant_acknowledge_purchase_order_lines_request is not None:
            _body_params = single_merchant_acknowledge_purchase_order_lines_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/purchase-orders/lines/acknowledge',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create(
        self,
        single_merchant_create_purchase_order_shipment_request: Optional[SingleMerchantCreatePurchaseOrderShipmentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Create a purchase order shipment.

        One shipments can ship (parts of) multiple orders

        :param single_merchant_create_purchase_order_shipment_request:
        :type single_merchant_create_purchase_order_shipment_request: SingleMerchantCreatePurchaseOrderShipmentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            single_merchant_create_purchase_order_shipment_request=single_merchant_create_purchase_order_shipment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_with_http_info(
        self,
        single_merchant_create_purchase_order_shipment_request: Optional[SingleMerchantCreatePurchaseOrderShipmentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Create a purchase order shipment.

        One shipments can ship (parts of) multiple orders

        :param single_merchant_create_purchase_order_shipment_request:
        :type single_merchant_create_purchase_order_shipment_request: SingleMerchantCreatePurchaseOrderShipmentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            single_merchant_create_purchase_order_shipment_request=single_merchant_create_purchase_order_shipment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_without_preload_content(
        self,
        single_merchant_create_purchase_order_shipment_request: Optional[SingleMerchantCreatePurchaseOrderShipmentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a purchase order shipment.

        One shipments can ship (parts of) multiple orders

        :param single_merchant_create_purchase_order_shipment_request:
        :type single_merchant_create_purchase_order_shipment_request: SingleMerchantCreatePurchaseOrderShipmentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            single_merchant_create_purchase_order_shipment_request=single_merchant_create_purchase_order_shipment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_serialize(
        self,
        single_merchant_create_purchase_order_shipment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if single_merchant_create_purchase_order_shipment_request is not None:
            _body_params = single_merchant_create_purchase_order_shipment_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/purchase-orders/shipments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_invoice(
        self,
        single_merchant_create_purchase_order_invoice_request: Annotated[Optional[SingleMerchantCreatePurchaseOrderInvoiceRequest], Field(description="Model for purchase order invoice.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Creates a purchase order invoice

        Creates invoice for a purchase order.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param single_merchant_create_purchase_order_invoice_request: Model for purchase order invoice.
        :type single_merchant_create_purchase_order_invoice_request: SingleMerchantCreatePurchaseOrderInvoiceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoice_serialize(
            single_merchant_create_purchase_order_invoice_request=single_merchant_create_purchase_order_invoice_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_invoice_with_http_info(
        self,
        single_merchant_create_purchase_order_invoice_request: Annotated[Optional[SingleMerchantCreatePurchaseOrderInvoiceRequest], Field(description="Model for purchase order invoice.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Creates a purchase order invoice

        Creates invoice for a purchase order.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param single_merchant_create_purchase_order_invoice_request: Model for purchase order invoice.
        :type single_merchant_create_purchase_order_invoice_request: SingleMerchantCreatePurchaseOrderInvoiceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoice_serialize(
            single_merchant_create_purchase_order_invoice_request=single_merchant_create_purchase_order_invoice_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_invoice_without_preload_content(
        self,
        single_merchant_create_purchase_order_invoice_request: Annotated[Optional[SingleMerchantCreatePurchaseOrderInvoiceRequest], Field(description="Model for purchase order invoice.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a purchase order invoice

        Creates invoice for a purchase order.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param single_merchant_create_purchase_order_invoice_request: Model for purchase order invoice.
        :type single_merchant_create_purchase_order_invoice_request: SingleMerchantCreatePurchaseOrderInvoiceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoice_serialize(
            single_merchant_create_purchase_order_invoice_request=single_merchant_create_purchase_order_invoice_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_invoice_serialize(
        self,
        single_merchant_create_purchase_order_invoice_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if single_merchant_create_purchase_order_invoice_request is not None:
            _body_params = single_merchant_create_purchase_order_invoice_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/purchase-orders/invoice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_invoices(
        self,
        bulk_merchant_create_purchase_order_invoices_request: Annotated[Optional[BulkMerchantCreatePurchaseOrderInvoicesRequest], Field(description="Model for purchase order invoices.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Creates a purchase order invoices in a bulk

        Creates invoices for a purchase orders in a bulk.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param bulk_merchant_create_purchase_order_invoices_request: Model for purchase order invoices.
        :type bulk_merchant_create_purchase_order_invoices_request: BulkMerchantCreatePurchaseOrderInvoicesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoices_serialize(
            bulk_merchant_create_purchase_order_invoices_request=bulk_merchant_create_purchase_order_invoices_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_invoices_with_http_info(
        self,
        bulk_merchant_create_purchase_order_invoices_request: Annotated[Optional[BulkMerchantCreatePurchaseOrderInvoicesRequest], Field(description="Model for purchase order invoices.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Creates a purchase order invoices in a bulk

        Creates invoices for a purchase orders in a bulk.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param bulk_merchant_create_purchase_order_invoices_request: Model for purchase order invoices.
        :type bulk_merchant_create_purchase_order_invoices_request: BulkMerchantCreatePurchaseOrderInvoicesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoices_serialize(
            bulk_merchant_create_purchase_order_invoices_request=bulk_merchant_create_purchase_order_invoices_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_invoices_without_preload_content(
        self,
        bulk_merchant_create_purchase_order_invoices_request: Annotated[Optional[BulkMerchantCreatePurchaseOrderInvoicesRequest], Field(description="Model for purchase order invoices.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a purchase order invoices in a bulk

        Creates invoices for a purchase orders in a bulk.<br />Request will be accepted and data persisted only if all validations passed.<br />Any validation messages and errors will be returned in a HTTP 4xx response.

        :param bulk_merchant_create_purchase_order_invoices_request: Model for purchase order invoices.
        :type bulk_merchant_create_purchase_order_invoices_request: BulkMerchantCreatePurchaseOrderInvoicesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_invoices_serialize(
            bulk_merchant_create_purchase_order_invoices_request=bulk_merchant_create_purchase_order_invoices_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '404': "ApiResponse",
            '409': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_invoices_serialize(
        self,
        bulk_merchant_create_purchase_order_invoices_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if bulk_merchant_create_purchase_order_invoices_request is not None:
            _body_params = bulk_merchant_create_purchase_order_invoices_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/purchase-orders/invoice/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_by_filter(
        self,
        identifiers_identifier_type: Annotated[Optional[PurchaseOrderIdentifierType], Field(description="The type of identifier: which identifier to filter on")] = None,
        identifiers_models: Annotated[Optional[List[StrictStr]], Field(description="The value (of the selected type) to filter on")] = None,
        statuses: Optional[List[ModulesPurchaseOrderStatus]] = None,
        order_date_range_from_date: Optional[datetime] = None,
        order_date_range_to_date: Optional[datetime] = None,
        create_date_range_from_date: Optional[datetime] = None,
        create_date_range_to_date: Optional[datetime] = None,
        update_date_range_from_date: Optional[datetime] = None,
        update_date_range_to_date: Optional[datetime] = None,
        channel_ids: Optional[List[StrictInt]] = None,
        type: Optional[ModulesPurchaseOrderType] = None,
        page_index: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfIPurchaseOrderByFilter:
        """Gets purchase orders by filter

        Gets purchase orders based on the available filters.

        :param identifiers_identifier_type: The type of identifier: which identifier to filter on
        :type identifiers_identifier_type: PurchaseOrderIdentifierType
        :param identifiers_models: The value (of the selected type) to filter on
        :type identifiers_models: List[str]
        :param statuses:
        :type statuses: List[ModulesPurchaseOrderStatus]
        :param order_date_range_from_date:
        :type order_date_range_from_date: datetime
        :param order_date_range_to_date:
        :type order_date_range_to_date: datetime
        :param create_date_range_from_date:
        :type create_date_range_from_date: datetime
        :param create_date_range_to_date:
        :type create_date_range_to_date: datetime
        :param update_date_range_from_date:
        :type update_date_range_from_date: datetime
        :param update_date_range_to_date:
        :type update_date_range_to_date: datetime
        :param channel_ids:
        :type channel_ids: List[int]
        :param type:
        :type type: ModulesPurchaseOrderType
        :param page_index:
        :type page_index: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_filter_serialize(
            identifiers_identifier_type=identifiers_identifier_type,
            identifiers_models=identifiers_models,
            statuses=statuses,
            order_date_range_from_date=order_date_range_from_date,
            order_date_range_to_date=order_date_range_to_date,
            create_date_range_from_date=create_date_range_from_date,
            create_date_range_to_date=create_date_range_to_date,
            update_date_range_from_date=update_date_range_from_date,
            update_date_range_to_date=update_date_range_to_date,
            channel_ids=channel_ids,
            type=type,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfIPurchaseOrderByFilter",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_by_filter_with_http_info(
        self,
        identifiers_identifier_type: Annotated[Optional[PurchaseOrderIdentifierType], Field(description="The type of identifier: which identifier to filter on")] = None,
        identifiers_models: Annotated[Optional[List[StrictStr]], Field(description="The value (of the selected type) to filter on")] = None,
        statuses: Optional[List[ModulesPurchaseOrderStatus]] = None,
        order_date_range_from_date: Optional[datetime] = None,
        order_date_range_to_date: Optional[datetime] = None,
        create_date_range_from_date: Optional[datetime] = None,
        create_date_range_to_date: Optional[datetime] = None,
        update_date_range_from_date: Optional[datetime] = None,
        update_date_range_to_date: Optional[datetime] = None,
        channel_ids: Optional[List[StrictInt]] = None,
        type: Optional[ModulesPurchaseOrderType] = None,
        page_index: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfIPurchaseOrderByFilter]:
        """Gets purchase orders by filter

        Gets purchase orders based on the available filters.

        :param identifiers_identifier_type: The type of identifier: which identifier to filter on
        :type identifiers_identifier_type: PurchaseOrderIdentifierType
        :param identifiers_models: The value (of the selected type) to filter on
        :type identifiers_models: List[str]
        :param statuses:
        :type statuses: List[ModulesPurchaseOrderStatus]
        :param order_date_range_from_date:
        :type order_date_range_from_date: datetime
        :param order_date_range_to_date:
        :type order_date_range_to_date: datetime
        :param create_date_range_from_date:
        :type create_date_range_from_date: datetime
        :param create_date_range_to_date:
        :type create_date_range_to_date: datetime
        :param update_date_range_from_date:
        :type update_date_range_from_date: datetime
        :param update_date_range_to_date:
        :type update_date_range_to_date: datetime
        :param channel_ids:
        :type channel_ids: List[int]
        :param type:
        :type type: ModulesPurchaseOrderType
        :param page_index:
        :type page_index: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_filter_serialize(
            identifiers_identifier_type=identifiers_identifier_type,
            identifiers_models=identifiers_models,
            statuses=statuses,
            order_date_range_from_date=order_date_range_from_date,
            order_date_range_to_date=order_date_range_to_date,
            create_date_range_from_date=create_date_range_from_date,
            create_date_range_to_date=create_date_range_to_date,
            update_date_range_from_date=update_date_range_from_date,
            update_date_range_to_date=update_date_range_to_date,
            channel_ids=channel_ids,
            type=type,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfIPurchaseOrderByFilter",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_by_filter_without_preload_content(
        self,
        identifiers_identifier_type: Annotated[Optional[PurchaseOrderIdentifierType], Field(description="The type of identifier: which identifier to filter on")] = None,
        identifiers_models: Annotated[Optional[List[StrictStr]], Field(description="The value (of the selected type) to filter on")] = None,
        statuses: Optional[List[ModulesPurchaseOrderStatus]] = None,
        order_date_range_from_date: Optional[datetime] = None,
        order_date_range_to_date: Optional[datetime] = None,
        create_date_range_from_date: Optional[datetime] = None,
        create_date_range_to_date: Optional[datetime] = None,
        update_date_range_from_date: Optional[datetime] = None,
        update_date_range_to_date: Optional[datetime] = None,
        channel_ids: Optional[List[StrictInt]] = None,
        type: Optional[ModulesPurchaseOrderType] = None,
        page_index: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets purchase orders by filter

        Gets purchase orders based on the available filters.

        :param identifiers_identifier_type: The type of identifier: which identifier to filter on
        :type identifiers_identifier_type: PurchaseOrderIdentifierType
        :param identifiers_models: The value (of the selected type) to filter on
        :type identifiers_models: List[str]
        :param statuses:
        :type statuses: List[ModulesPurchaseOrderStatus]
        :param order_date_range_from_date:
        :type order_date_range_from_date: datetime
        :param order_date_range_to_date:
        :type order_date_range_to_date: datetime
        :param create_date_range_from_date:
        :type create_date_range_from_date: datetime
        :param create_date_range_to_date:
        :type create_date_range_to_date: datetime
        :param update_date_range_from_date:
        :type update_date_range_from_date: datetime
        :param update_date_range_to_date:
        :type update_date_range_to_date: datetime
        :param channel_ids:
        :type channel_ids: List[int]
        :param type:
        :type type: ModulesPurchaseOrderType
        :param page_index:
        :type page_index: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_filter_serialize(
            identifiers_identifier_type=identifiers_identifier_type,
            identifiers_models=identifiers_models,
            statuses=statuses,
            order_date_range_from_date=order_date_range_from_date,
            order_date_range_to_date=order_date_range_to_date,
            create_date_range_from_date=create_date_range_from_date,
            create_date_range_to_date=create_date_range_to_date,
            update_date_range_from_date=update_date_range_from_date,
            update_date_range_to_date=update_date_range_to_date,
            channel_ids=channel_ids,
            type=type,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfIPurchaseOrderByFilter",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_by_filter_serialize(
        self,
        identifiers_identifier_type,
        identifiers_models,
        statuses,
        order_date_range_from_date,
        order_date_range_to_date,
        create_date_range_from_date,
        create_date_range_to_date,
        update_date_range_from_date,
        update_date_range_to_date,
        channel_ids,
        type,
        page_index,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'identifiers.models': 'multi',
            'statuses': 'multi',
            'channelIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if identifiers_identifier_type is not None:
            
            _query_params.append(('identifiers.identifierType', identifiers_identifier_type.value))
            
        if identifiers_models is not None:
            
            _query_params.append(('identifiers.models', identifiers_models))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if order_date_range_from_date is not None:
            if isinstance(order_date_range_from_date, datetime):
                _query_params.append(
                    (
                        'orderDateRange.fromDate',
                        order_date_range_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('orderDateRange.fromDate', order_date_range_from_date))
            
        if order_date_range_to_date is not None:
            if isinstance(order_date_range_to_date, datetime):
                _query_params.append(
                    (
                        'orderDateRange.toDate',
                        order_date_range_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('orderDateRange.toDate', order_date_range_to_date))
            
        if create_date_range_from_date is not None:
            if isinstance(create_date_range_from_date, datetime):
                _query_params.append(
                    (
                        'createDateRange.fromDate',
                        create_date_range_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createDateRange.fromDate', create_date_range_from_date))
            
        if create_date_range_to_date is not None:
            if isinstance(create_date_range_to_date, datetime):
                _query_params.append(
                    (
                        'createDateRange.toDate',
                        create_date_range_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createDateRange.toDate', create_date_range_to_date))
            
        if update_date_range_from_date is not None:
            if isinstance(update_date_range_from_date, datetime):
                _query_params.append(
                    (
                        'updateDateRange.fromDate',
                        update_date_range_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updateDateRange.fromDate', update_date_range_from_date))
            
        if update_date_range_to_date is not None:
            if isinstance(update_date_range_to_date, datetime):
                _query_params.append(
                    (
                        'updateDateRange.toDate',
                        update_date_range_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updateDateRange.toDate', update_date_range_to_date))
            
        if channel_ids is not None:
            
            _query_params.append(('channelIds', channel_ids))
            
        if type is not None:
            
            _query_params.append(('type', type.value))
            
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/purchase-orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_by_filter_shipment_merchant(
        self,
        channel_id: Annotated[Optional[StrictInt], Field(description="The identifier of the channel")] = None,
        identifiers_identifier_type: Annotated[Optional[PurchaseOrderShipmentIdentifierTypeValue], Field(description="The type of identifier: which identifier to filter on")] = None,
        identifiers_models: Annotated[Optional[List[StrictStr]], Field(description="The value (of the selected type) to filter on")] = None,
        shipped_date_range_from_date: Optional[datetime] = None,
        shipped_date_range_to_date: Optional[datetime] = None,
        create_date_range_from_date: Optional[datetime] = None,
        create_date_range_to_date: Optional[datetime] = None,
        update_date_range_from_date: Optional[datetime] = None,
        update_date_range_to_date: Optional[datetime] = None,
        bill_of_lading_number: Annotated[Optional[StrictStr], Field(description="The Bill of Lading number. Multiple shipments can have the same Bill of Lading number")] = None,
        carrier_name: Annotated[Optional[StrictStr], Field(description="The name of the carrier")] = None,
        page_index: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionOfIPurchaseOrderShipmentByFilter:
        """Gets purchase order shipments by filter

        Gets purchase order shipments based on the available filters.

        :param channel_id: The identifier of the channel
        :type channel_id: int
        :param identifiers_identifier_type: The type of identifier: which identifier to filter on
        :type identifiers_identifier_type: PurchaseOrderShipmentIdentifierTypeValue
        :param identifiers_models: The value (of the selected type) to filter on
        :type identifiers_models: List[str]
        :param shipped_date_range_from_date:
        :type shipped_date_range_from_date: datetime
        :param shipped_date_range_to_date:
        :type shipped_date_range_to_date: datetime
        :param create_date_range_from_date:
        :type create_date_range_from_date: datetime
        :param create_date_range_to_date:
        :type create_date_range_to_date: datetime
        :param update_date_range_from_date:
        :type update_date_range_from_date: datetime
        :param update_date_range_to_date:
        :type update_date_range_to_date: datetime
        :param bill_of_lading_number: The Bill of Lading number. Multiple shipments can have the same Bill of Lading number
        :type bill_of_lading_number: str
        :param carrier_name: The name of the carrier
        :type carrier_name: str
        :param page_index:
        :type page_index: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_filter_shipment_merchant_serialize(
            channel_id=channel_id,
            identifiers_identifier_type=identifiers_identifier_type,
            identifiers_models=identifiers_models,
            shipped_date_range_from_date=shipped_date_range_from_date,
            shipped_date_range_to_date=shipped_date_range_to_date,
            create_date_range_from_date=create_date_range_from_date,
            create_date_range_to_date=create_date_range_to_date,
            update_date_range_from_date=update_date_range_from_date,
            update_date_range_to_date=update_date_range_to_date,
            bill_of_lading_number=bill_of_lading_number,
            carrier_name=carrier_name,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfIPurchaseOrderShipmentByFilter",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_by_filter_shipment_merchant_with_http_info(
        self,
        channel_id: Annotated[Optional[StrictInt], Field(description="The identifier of the channel")] = None,
        identifiers_identifier_type: Annotated[Optional[PurchaseOrderShipmentIdentifierTypeValue], Field(description="The type of identifier: which identifier to filter on")] = None,
        identifiers_models: Annotated[Optional[List[StrictStr]], Field(description="The value (of the selected type) to filter on")] = None,
        shipped_date_range_from_date: Optional[datetime] = None,
        shipped_date_range_to_date: Optional[datetime] = None,
        create_date_range_from_date: Optional[datetime] = None,
        create_date_range_to_date: Optional[datetime] = None,
        update_date_range_from_date: Optional[datetime] = None,
        update_date_range_to_date: Optional[datetime] = None,
        bill_of_lading_number: Annotated[Optional[StrictStr], Field(description="The Bill of Lading number. Multiple shipments can have the same Bill of Lading number")] = None,
        carrier_name: Annotated[Optional[StrictStr], Field(description="The name of the carrier")] = None,
        page_index: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionOfIPurchaseOrderShipmentByFilter]:
        """Gets purchase order shipments by filter

        Gets purchase order shipments based on the available filters.

        :param channel_id: The identifier of the channel
        :type channel_id: int
        :param identifiers_identifier_type: The type of identifier: which identifier to filter on
        :type identifiers_identifier_type: PurchaseOrderShipmentIdentifierTypeValue
        :param identifiers_models: The value (of the selected type) to filter on
        :type identifiers_models: List[str]
        :param shipped_date_range_from_date:
        :type shipped_date_range_from_date: datetime
        :param shipped_date_range_to_date:
        :type shipped_date_range_to_date: datetime
        :param create_date_range_from_date:
        :type create_date_range_from_date: datetime
        :param create_date_range_to_date:
        :type create_date_range_to_date: datetime
        :param update_date_range_from_date:
        :type update_date_range_from_date: datetime
        :param update_date_range_to_date:
        :type update_date_range_to_date: datetime
        :param bill_of_lading_number: The Bill of Lading number. Multiple shipments can have the same Bill of Lading number
        :type bill_of_lading_number: str
        :param carrier_name: The name of the carrier
        :type carrier_name: str
        :param page_index:
        :type page_index: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_filter_shipment_merchant_serialize(
            channel_id=channel_id,
            identifiers_identifier_type=identifiers_identifier_type,
            identifiers_models=identifiers_models,
            shipped_date_range_from_date=shipped_date_range_from_date,
            shipped_date_range_to_date=shipped_date_range_to_date,
            create_date_range_from_date=create_date_range_from_date,
            create_date_range_to_date=create_date_range_to_date,
            update_date_range_from_date=update_date_range_from_date,
            update_date_range_to_date=update_date_range_to_date,
            bill_of_lading_number=bill_of_lading_number,
            carrier_name=carrier_name,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfIPurchaseOrderShipmentByFilter",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_by_filter_shipment_merchant_without_preload_content(
        self,
        channel_id: Annotated[Optional[StrictInt], Field(description="The identifier of the channel")] = None,
        identifiers_identifier_type: Annotated[Optional[PurchaseOrderShipmentIdentifierTypeValue], Field(description="The type of identifier: which identifier to filter on")] = None,
        identifiers_models: Annotated[Optional[List[StrictStr]], Field(description="The value (of the selected type) to filter on")] = None,
        shipped_date_range_from_date: Optional[datetime] = None,
        shipped_date_range_to_date: Optional[datetime] = None,
        create_date_range_from_date: Optional[datetime] = None,
        create_date_range_to_date: Optional[datetime] = None,
        update_date_range_from_date: Optional[datetime] = None,
        update_date_range_to_date: Optional[datetime] = None,
        bill_of_lading_number: Annotated[Optional[StrictStr], Field(description="The Bill of Lading number. Multiple shipments can have the same Bill of Lading number")] = None,
        carrier_name: Annotated[Optional[StrictStr], Field(description="The name of the carrier")] = None,
        page_index: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets purchase order shipments by filter

        Gets purchase order shipments based on the available filters.

        :param channel_id: The identifier of the channel
        :type channel_id: int
        :param identifiers_identifier_type: The type of identifier: which identifier to filter on
        :type identifiers_identifier_type: PurchaseOrderShipmentIdentifierTypeValue
        :param identifiers_models: The value (of the selected type) to filter on
        :type identifiers_models: List[str]
        :param shipped_date_range_from_date:
        :type shipped_date_range_from_date: datetime
        :param shipped_date_range_to_date:
        :type shipped_date_range_to_date: datetime
        :param create_date_range_from_date:
        :type create_date_range_from_date: datetime
        :param create_date_range_to_date:
        :type create_date_range_to_date: datetime
        :param update_date_range_from_date:
        :type update_date_range_from_date: datetime
        :param update_date_range_to_date:
        :type update_date_range_to_date: datetime
        :param bill_of_lading_number: The Bill of Lading number. Multiple shipments can have the same Bill of Lading number
        :type bill_of_lading_number: str
        :param carrier_name: The name of the carrier
        :type carrier_name: str
        :param page_index:
        :type page_index: int
        :param page_size:
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_filter_shipment_merchant_serialize(
            channel_id=channel_id,
            identifiers_identifier_type=identifiers_identifier_type,
            identifiers_models=identifiers_models,
            shipped_date_range_from_date=shipped_date_range_from_date,
            shipped_date_range_to_date=shipped_date_range_to_date,
            create_date_range_from_date=create_date_range_from_date,
            create_date_range_to_date=create_date_range_to_date,
            update_date_range_from_date=update_date_range_from_date,
            update_date_range_to_date=update_date_range_to_date,
            bill_of_lading_number=bill_of_lading_number,
            carrier_name=carrier_name,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionOfIPurchaseOrderShipmentByFilter",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_by_filter_shipment_merchant_serialize(
        self,
        channel_id,
        identifiers_identifier_type,
        identifiers_models,
        shipped_date_range_from_date,
        shipped_date_range_to_date,
        create_date_range_from_date,
        create_date_range_to_date,
        update_date_range_from_date,
        update_date_range_to_date,
        bill_of_lading_number,
        carrier_name,
        page_index,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'identifiers.models': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if channel_id is not None:
            
            _query_params.append(('channelId', channel_id))
            
        if identifiers_identifier_type is not None:
            
            _query_params.append(('identifiers.identifierType', identifiers_identifier_type.value))
            
        if identifiers_models is not None:
            
            _query_params.append(('identifiers.models', identifiers_models))
            
        if shipped_date_range_from_date is not None:
            if isinstance(shipped_date_range_from_date, datetime):
                _query_params.append(
                    (
                        'shippedDateRange.fromDate',
                        shipped_date_range_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('shippedDateRange.fromDate', shipped_date_range_from_date))
            
        if shipped_date_range_to_date is not None:
            if isinstance(shipped_date_range_to_date, datetime):
                _query_params.append(
                    (
                        'shippedDateRange.toDate',
                        shipped_date_range_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('shippedDateRange.toDate', shipped_date_range_to_date))
            
        if create_date_range_from_date is not None:
            if isinstance(create_date_range_from_date, datetime):
                _query_params.append(
                    (
                        'createDateRange.fromDate',
                        create_date_range_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createDateRange.fromDate', create_date_range_from_date))
            
        if create_date_range_to_date is not None:
            if isinstance(create_date_range_to_date, datetime):
                _query_params.append(
                    (
                        'createDateRange.toDate',
                        create_date_range_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createDateRange.toDate', create_date_range_to_date))
            
        if update_date_range_from_date is not None:
            if isinstance(update_date_range_from_date, datetime):
                _query_params.append(
                    (
                        'updateDateRange.fromDate',
                        update_date_range_from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updateDateRange.fromDate', update_date_range_from_date))
            
        if update_date_range_to_date is not None:
            if isinstance(update_date_range_to_date, datetime):
                _query_params.append(
                    (
                        'updateDateRange.toDate',
                        update_date_range_to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updateDateRange.toDate', update_date_range_to_date))
            
        if bill_of_lading_number is not None:
            
            _query_params.append(('billOfLadingNumber', bill_of_lading_number))
            
        if carrier_name is not None:
            
            _query_params.append(('carrierName', carrier_name))
            
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/purchase-orders/shipments/merchant',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update(
        self,
        single_merchant_update_purchase_order_shipment_request: Optional[SingleMerchantUpdatePurchaseOrderShipmentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse:
        """Update a purchase order shipment.


        :param single_merchant_update_purchase_order_shipment_request:
        :type single_merchant_update_purchase_order_shipment_request: SingleMerchantUpdatePurchaseOrderShipmentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_serialize(
            single_merchant_update_purchase_order_shipment_request=single_merchant_update_purchase_order_shipment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_with_http_info(
        self,
        single_merchant_update_purchase_order_shipment_request: Optional[SingleMerchantUpdatePurchaseOrderShipmentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApiResponse]:
        """Update a purchase order shipment.


        :param single_merchant_update_purchase_order_shipment_request:
        :type single_merchant_update_purchase_order_shipment_request: SingleMerchantUpdatePurchaseOrderShipmentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_serialize(
            single_merchant_update_purchase_order_shipment_request=single_merchant_update_purchase_order_shipment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_without_preload_content(
        self,
        single_merchant_update_purchase_order_shipment_request: Optional[SingleMerchantUpdatePurchaseOrderShipmentRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a purchase order shipment.


        :param single_merchant_update_purchase_order_shipment_request:
        :type single_merchant_update_purchase_order_shipment_request: SingleMerchantUpdatePurchaseOrderShipmentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_serialize(
            single_merchant_update_purchase_order_shipment_request=single_merchant_update_purchase_order_shipment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ApiResponse",
            '400': "ApiResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_serialize(
        self,
        single_merchant_update_purchase_order_shipment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if single_merchant_update_purchase_order_shipment_request is not None:
            _body_params = single_merchant_update_purchase_order_shipment_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json-patch+json', 
                        'application/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/purchase-orders/shipments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


