# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.collection_of_i_purchase_order_shipment_by_filter import CollectionOfIPurchaseOrderShipmentByFilter

class TestCollectionOfIPurchaseOrderShipmentByFilter(unittest.TestCase):
    """CollectionOfIPurchaseOrderShipmentByFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CollectionOfIPurchaseOrderShipmentByFilter:
        """Test CollectionOfIPurchaseOrderShipmentByFilter
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CollectionOfIPurchaseOrderShipmentByFilter`
        """
        model = CollectionOfIPurchaseOrderShipmentByFilter()
        if include_optional:
            return CollectionOfIPurchaseOrderShipmentByFilter(
                content = [
                    openapi_client.models.i_purchase_order_shipment_by_filter.IPurchaseOrderShipmentByFilter(
                        id = 56, 
                        merchant_shipment_no = '', 
                        channel_shipment_no = '', 
                        shipment_type = 'TRUCK_LOAD', 
                        shipped_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        estimated_delivery_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        carrier_name = '', 
                        carrier_shipment_no = '', 
                        bill_of_lading_number = '', 
                        shipment_weight_unit_of_measure = 'GRAMS', 
                        shipment_weight = 1.337, 
                        shipment_volume_unit_of_measure = 'CUBIC_FEET', 
                        shipment_volume = 1.337, 
                        last_merchant_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_exported_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_export_status = 'NONE', 
                        lines = [
                            openapi_client.models.i_purchase_order_shipment_line_by_filter.IPurchaseOrderShipmentLineByFilter(
                                id = 56, 
                                channel_order_no = '', 
                                item_sequence_number = '', 
                                channel_product_no = '', 
                                merchant_product_no = '', 
                                quantity_unit_of_measure = 'CASES', 
                                quantity = 56, 
                                quantity_unit_size = 56, 
                                expiry_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                count = 56,
                total_count = 56,
                items_per_page = 56,
                status_code = 56,
                request_id = '',
                log_id = '',
                success = True,
                message = '',
                exception_type = '',
                validation_errors = {
                    'key' : [
                        ''
                        ]
                    }
            )
        else:
            return CollectionOfIPurchaseOrderShipmentByFilter(
        )
        """

    def testCollectionOfIPurchaseOrderShipmentByFilter(self):
        """Test CollectionOfIPurchaseOrderShipmentByFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
