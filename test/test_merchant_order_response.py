# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.merchant_order_response import MerchantOrderResponse

class TestMerchantOrderResponse(unittest.TestCase):
    """MerchantOrderResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MerchantOrderResponse:
        """Test MerchantOrderResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MerchantOrderResponse`
        """
        model = MerchantOrderResponse()
        if include_optional:
            return MerchantOrderResponse(
                id = 56,
                channel_name = '',
                channel_id = 56,
                global_channel_name = '',
                global_channel_id = 56,
                channel_order_support = 'NONE',
                channel_order_no = '',
                commercial_order_no = '',
                merchant_order_no = '',
                status = 'IN_PROGRESS',
                is_business_order = True,
                acknowledged_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                merchant_comment = '',
                billing_address = openapi_client.models.merchant_address_response.MerchantAddressResponse(
                    line1 = '', 
                    line2 = '', 
                    line3 = '', 
                    gender = 'MALE', 
                    company_name = '', 
                    first_name = '', 
                    last_name = '', 
                    street_name = '', 
                    house_nr = '', 
                    house_nr_addition = '', 
                    zip_code = '', 
                    city = '', 
                    region = '', 
                    country_iso = '', 
                    original = '', ),
                shipping_address = openapi_client.models.merchant_address_response.MerchantAddressResponse(
                    line1 = '', 
                    line2 = '', 
                    line3 = '', 
                    gender = 'MALE', 
                    company_name = '', 
                    first_name = '', 
                    last_name = '', 
                    street_name = '', 
                    house_nr = '', 
                    house_nr_addition = '', 
                    zip_code = '', 
                    city = '', 
                    region = '', 
                    country_iso = '', 
                    original = '', ),
                sub_total_incl_vat = 1.337,
                sub_total_vat = 1.337,
                shipping_costs_vat = 1.337,
                total_incl_vat = 1.337,
                total_vat = 1.337,
                original_sub_total_incl_vat = 1.337,
                original_sub_total_vat = 1.337,
                original_shipping_costs_incl_vat = 1.337,
                original_shipping_costs_vat = 1.337,
                original_total_incl_vat = 1.337,
                original_total_vat = 1.337,
                sub_total_excl_vat = 1.337,
                total_excl_vat = 1.337,
                shipping_costs_excl_vat = 1.337,
                original_sub_total_excl_vat = 1.337,
                original_shipping_costs_excl_vat = 1.337,
                original_total_excl_vat = 1.337,
                lines = [
                    openapi_client.models.merchant_order_line_response.MerchantOrderLineResponse(
                        id = 56, 
                        channel_order_line_no = '', 
                        status = 'IN_PROGRESS', 
                        is_fulfillment_by_marketplace = True, 
                        gtin = '', 
                        description = '', 
                        stock_location = openapi_client.models.merchant_stock_location_response.MerchantStockLocationResponse(
                            id = 56, 
                            name = '', ), 
                        unit_vat = 1.337, 
                        line_total_incl_vat = 1.337, 
                        line_vat = 1.337, 
                        original_unit_price_incl_vat = 1.337, 
                        original_unit_vat = 1.337, 
                        original_line_total_incl_vat = 1.337, 
                        original_line_vat = 1.337, 
                        original_fee_fixed = 1.337, 
                        bundle_product_merchant_product_no = '', 
                        juris_code = '', 
                        juris_name = '', 
                        vat_rate = 1.337, 
                        unit_price_excl_vat = 1.337, 
                        line_total_excl_vat = 1.337, 
                        original_unit_price_excl_vat = 1.337, 
                        original_line_total_excl_vat = 1.337, 
                        extra_data = [
                            openapi_client.models.merchant_order_line_extra_data_response.MerchantOrderLineExtraDataResponse(
                                key = '', 
                                value = '', )
                            ], 
                        channel_product_no = '', 
                        merchant_product_no = '', 
                        quantity = 0, 
                        cancellation_requested_quantity = 0, 
                        unit_price_incl_vat = 0, 
                        fee_fixed = 0, 
                        fee_rate = 0, 
                        condition = 'NEW', 
                        expected_delivery_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        latest_delivery_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expected_shipment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        latest_shipment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                shipping_costs_incl_vat = 1.337,
                phone = '',
                email = '',
                language_code = '',
                company_registration_no = '',
                vat_no = '',
                payment_method = '',
                payment_reference_no = '',
                currency_code = '0',
                order_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                channel_customer_no = '',
                extra_data = {
                    'key' : ''
                    }
            )
        else:
            return MerchantOrderResponse(
                email = '',
                currency_code = '0',
                order_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testMerchantOrderResponse(self):
        """Test MerchantOrderResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
