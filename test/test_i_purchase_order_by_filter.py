# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants

    The version of the OpenAPI document: 2.14.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.i_purchase_order_by_filter import IPurchaseOrderByFilter

class TestIPurchaseOrderByFilter(unittest.TestCase):
    """IPurchaseOrderByFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IPurchaseOrderByFilter:
        """Test IPurchaseOrderByFilter
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IPurchaseOrderByFilter`
        """
        model = IPurchaseOrderByFilter()
        if include_optional:
            return IPurchaseOrderByFilter(
                id = 56,
                channel_id = 56,
                channel_name = '',
                global_channel_name = '',
                global_channel_id = 56,
                channel_purchase_order_no = '',
                merchant_purchase_order_no = '',
                status = 'NEW',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = 'REGULAR_ORDER',
                from_ship_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                to_ship_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                from_delivery_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                to_delivery_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                import_information = openapi_client.models.i_import_information.IImportInformation(
                    import_containers = '', 
                    international_commercial_terms = '', 
                    method_of_payment = '', 
                    port_of_delivery = '', 
                    shipping_instructions = '', 
                    deal_code = '', ),
                selling_party = openapi_client.models.i_vendor_party.IVendorParty(
                    party_id = '', 
                    tax_registration_type = 'VAT', 
                    tax_registration_no = '', 
                    name = '', 
                    address_line1 = '', 
                    address_line2 = '', 
                    address_line3 = '', 
                    city = '', 
                    county = '', 
                    district = '', 
                    state_or_region = '', 
                    postal_code = '', 
                    country_code = '', 
                    phone = '', ),
                ship_to_party = openapi_client.models.i_vendor_party.IVendorParty(
                    party_id = '', 
                    tax_registration_type = 'VAT', 
                    tax_registration_no = '', 
                    name = '', 
                    address_line1 = '', 
                    address_line2 = '', 
                    address_line3 = '', 
                    city = '', 
                    county = '', 
                    district = '', 
                    state_or_region = '', 
                    postal_code = '', 
                    country_code = '', 
                    phone = '', ),
                buying_party = openapi_client.models.i_vendor_party.IVendorParty(
                    party_id = '', 
                    tax_registration_type = 'VAT', 
                    tax_registration_no = '', 
                    name = '', 
                    address_line1 = '', 
                    address_line2 = '', 
                    address_line3 = '', 
                    city = '', 
                    county = '', 
                    district = '', 
                    state_or_region = '', 
                    postal_code = '', 
                    country_code = '', 
                    phone = '', ),
                billing_party = openapi_client.models.i_vendor_party.IVendorParty(
                    party_id = '', 
                    tax_registration_type = 'VAT', 
                    tax_registration_no = '', 
                    name = '', 
                    address_line1 = '', 
                    address_line2 = '', 
                    address_line3 = '', 
                    city = '', 
                    county = '', 
                    district = '', 
                    state_or_region = '', 
                    postal_code = '', 
                    country_code = '', 
                    phone = '', ),
                lines = [
                    openapi_client.models.i_purchase_order_line_by_filter.IPurchaseOrderLineByFilter(
                        id = 56, 
                        channel_order_line_no = '', 
                        channel_product_no = '', 
                        merchant_product_no = '', 
                        quantity = 56, 
                        is_back_order_allowed = True, 
                        unit_of_measure = 'CASES', 
                        unit_size = 56, 
                        net_cost_amount = 1.337, 
                        net_cost_currency = '', 
                        list_price_amount = 1.337, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        acknowledged_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        line_total = 1.337, )
                    ]
            )
        else:
            return IPurchaseOrderByFilter(
        )
        """

    def testIPurchaseOrderByFilter(self):
        """Test IPurchaseOrderByFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
